#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License (the License). You may not use this file except in
# compliance with the License..
#
# You can obtain a copy of the License at http://www.netbeans.org/cddl.html
# or http://www.netbeans.org/cddl.txt.
#
# When distributing Covered Code, include this CDDL Header Notice in each file
# and include the License file at http://www.netbeans.org/cddl.txt.
# If applicable, add the following below the CDDL Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# The Original Software is JSwat. The Initial Developer of the Original
# Software is Nathan L. Fiedler. Portions created by Nathan L. Fiedler
# are Copyright (C) 1999-2006. All Rights Reserved.
#
# Contributor(s): Nathan L. Fiedler.
#
# $Id$
#

ExpressionCondition.describe = Expression: {0}
ExpressionCondition.notBoolean = Condition expression must be a boolean.

ExpressionMonitor.failed = Expression {0} failed to evaluate: {1}

ERR_Resolve_AmbiguousClass = Class specification matches more than one class.
ERR_Resolve_AmbiguousMethod = Method is overloaded; please specify arguments.
ERR_Resolve_InvalidType = Breakpoints cannot be set in interfaces or arrays ({0}).
ERR_Resolve_InvalidSyntax = Invalid method breakpoint syntax.
ERR_Resolve_InvalidArgumentType = Invalid argument type: {0}
ERR_Resolve_AbsentInfo = There is no line number information for {0}
ERR_Resolve_NoSuchMethod = No matching method found in the class.
ERR_Resolve_Unknown = Breakpoint failed to resolve: {0}

PROP_Location = Location
HINT_Location = JDI Location of breakpoint.
PROP_MethodParameters = Parameters
HINT_MethodParameters = List of method parameters.
PROP_ObjectReference = Object ID
HINT_ObjectReference = Object that contains the field.
PROP_SuspendPolicy = Suspend Policy
HINT_SuspendPolicy = Which threads suspend for breakpoint event.

Class.description = Class {0} {1}
Class.description.any = all
Class.description.load = load
Class.description.unload = unload
Class.description.both = load / unload
Class.description.stop.load = Class {0} loaded on thread {1}
Class.description.stop.unload = Class {0} unloaded

Exception.description = Exception {0} {1}
Exception.description.caught = caught
Exception.description.uncaught = uncaught
Exception.description.both = caught / uncaught
Exception.description.stop = Exception {0} occurred on thread {1}: {2}

Line.description = Line {0}:{1}
Line.description.stop = Stopped at line {1} in {0} on thread {2}

Location.description = Location {0}.{1}{2} : {3}
Location.description.stop = Stopped in {0}.{1}{2} at code index {3} on thread {4}

Method.description = Method {0}.{1}({2})
Method.description.stop = Stopped at method {0}.{1}({2}) on thread {3}

Resolve.invalidName = Invalid class name {0}

CTL_StackTrace_absentInfo = <absent information>
CTL_StackTrace_emptyStack = (empty stack)
CTL_StackTrace_native = native
CTL_StackTrace_header = Stack for thread {0}:

SuspendPolicy.all = All threads
SuspendPolicy.event = Event thread
SuspendPolicy.none = No threads

Thread.description = Thread {0}
Thread.description.start = start
Thread.description.death = death
Thread.description.both = start / death
Thread.description.stop = Thread {0} {1}
Thread.description.stop.start = started
Thread.description.stop.death = died

Trace.description = Trace methods in class {0}, thread {1}
Trace.description.stop = Method {0}.{1}({2}) {3} on thread {4}
Trace.description.stop.enter = entered
Trace.description.stop.exit = exited
Trace.description.stop.return = (returned {0})

UncaughtException.description = Uncaught exceptions

Watch.accessed = Field {0} in {1} accessed on thread {2} has value {3}
Watch.cannotWatchAccess = Cannot watch field access.
Watch.cannotWatchModify = Cannot watch field modification.
Watch.description = Field {0} {1}
Watch.description.access = access
Watch.description.modify = modify
Watch.description.both = access / modify
Watch.modified = Field {0} in {1} modified on thread {2} set to {3}

CTL_BreakpointGroup_description = Group {0}
