#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License (the License). You may not use this file except in
# compliance with the License..
#
# You can obtain a copy of the License at http://www.netbeans.org/cddl.html
# or http://www.netbeans.org/cddl.txt.
#
# When distributing Covered Code, include this CDDL Header Notice in each file
# and include the License file at http://www.netbeans.org/cddl.txt.
# If applicable, add the following below the CDDL Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# The Original Software is JSwat. The Initial Developer of the Original
# Software is Nathan L. Fiedler. Portions created by Nathan L. Fiedler
# are Copyright (C) 2005-2009. All Rights Reserved.
#
# Contributor(s): Nathan L. Fiedler.
#
# $Id$
#

ERR_AbsentInformation = Missing source information for class: {0}
ERR_AmbiguousClass = Ambiguous class name: {0}
ERR_AmbiguousMethod = Ambiguous method name: {0}
ERR_ClassNotFound = Specified class not found: {0}
ERR_ClassNotPrepared = Class not prepared.
ERR_EvaluationError = Evaluation failed: {0}
ERR_ExprNotAnObject = Expression does not refer to an object reference.
ERR_InvalidNumber = Invalid number format: {0}
ERR_InvalidStackFrame = Invalid stack frame index, or thread not started.
ERR_InvalidThreadID = Invalid or unknown thread identifier.
ERR_MalformedClass = Malformed class name: {0}
ERR_MalformedMethod = Malformed method name: {0}
ERR_NativeMethod = Native method, no debugging information available.
ERR_NoThread = No current thread has been set.
ERR_ObjectCollected = Object has been garbage collected, no information available.
ERR_ThreadNoStack = Thread has not started (it has no stack).
ERR_ThreadNotSuspended = The selected thread is not suspended.
ERR_IncompatibleThread = Thread has not started running or is not suspended.

alias_Description = Create a command alias, or display alias definitions.
alias_Help = Syntax: alias [<name> [<input>]]\n\
Subsequent uses of 'name' will invoke 'input'.\n\
With no arguments, shows all defined aliases.\n\
With one argument, shows the definition of the named alias.\n\
\n\
Examples:\n\
\talias ali1 cmd arg1 arg2\n\
\talias ali2 cmd "argument;with;semicolons"\n\
\talias macro "cmd1 ; cmd2 ; cmd3"\n\
\n\
See also: unalias
CTL_Alias_Definition = Alias {0} is {1}
ERR_Alias_Undefined = Alias {0} is undefined.

apropos_Description = Searches the command descriptions for keywords.
apropos_Help = Syntax: apropos <regex>\n\
Searches the command descriptions for the given regular expression\n\
and displays matching commands and their descriptions.\n\
See java.util.regex.Pattern to learn about regular expressions.\n\
\n\
See also: 'help commands'

break_Description = Create a new breakpoint.
break_Help = Syntax (1): break\n\
Lists current breakpoints.\n\
\n\
Syntax (2): stop [go|thread] [<class>:]<line>\n\
\tSets breakpoint in class at specified source line.\n\
\tThe class is optional if the current location is set.\n\
\tExamples:\n\
\t\tstop pkg.MyClass:123\n\
\t\tstop OtherClass:321\n\
\t\tstop 200\n\
\n\
Syntax (3): stop [go|thread] [path/to/file.ext:]<line>\n\
\tSets breakpoint at the source line with the named file.\n\
\tThis is useful if the source file is not easily discovered.\n\
\tExample:\n\
\t\tstop java/lang/String.java:123\n\
\n\
Syntax (4): stop [go|thread] [<class>:]<method>([<arg-list>])\n\
\tSets breakpoint in class at specified method.\n\
\tThe class is optional if the current location is set.\n\
\tArgument list consists of primitives and class names,\n\
\tseparated by commas. Classes in 'java.lang' are matched\n\
\tautomatically when not fully-qualified.\n\
\tExamples:\n\
\t\tstop pkg.MyClass.doIt(int[])\n\
\t\tstop OtherClass.doIt(boolean, String, java.net.URL)\n\
\t\tstop doIt\n\
\n\
The 'go' and 'thread' options control which threads in the VM\n\
are suspended when the event occurs. 'go' suspends no threads,\n\
while 'thread' causes only the event thread to stop.\n\
The default is for all threads in the debuggee to suspend.\n\
\n\
See also: clear, disable, enable
CTL_Break_Added = Breakpoint added.

classpath_Description = Displays or sets the classpath.
classpath_Help = Syntax: classpath [path]\n\
With no argument, displays the current classpath.\n\
With an argument, sets the current classpath to that which is given.
CTL_classpath_Nopath = (none)

clear_Description = Remove a breakpoint.
clear_Help = clear [<n>...|all]\n\
Removes the breakpoints identified by the given unique numbers.\n\
With no arguments, lists the breakpoints and their assigned numbers.\n\
With 'all' argument, removes all breakpoints.\n\
\n\
See also: break, disable, enable
CTL_Clear_NotFound = Breakpoint not found.
CTL_Clear_Removed = Removed {0} breakpoint(s).

continue_Description = Resumes the debuggee VM.
continue_Help = Syntax: continue\n\
Note that you can use a unique prefix, such as 'cont', instead of the\n\
full name of the command.

disablegc_Description = Disables garbage collection for an object.
disablegc_Help = Syntax: disablegc <expr>\n\
The <expr> argument is an expression specifying an object which\n\
is visible in the current scope.\n\
\n\
See also: enablegc
CTL_disablegc_CollectionDisabled = Garbage collection disabled.

elements_Description = Displays elements of arrays, maps, and collections.
elements_Help = Syntax: elements [<start> [<end>]] <expr>\n\
Evaluates the expression expecting an array, Map, or Collection.\n\
Displays the elements between start and end (inclusive).\n\
Defaults to displaying the entire collection.
ERR_elements_IsNull = Referenced object is null.
ERR_elements_MapNoIndex = Warning: maps have no indices; start/end ignored.
ERR_elements_NotCollection = Referenced object is not a Collection.

enablegc_Description = Enables garbage collection for an object.
enablegc_Help = Syntax: enablegc <expr>\n\
The <expr> argument is an expression specifying an object which\n\
is visible in the current scope.\n\
\n\
See also: enablegc
CTL_enablegc_CollectionEnabled = Garbage collection enabled.

help_Description = Describes the available commands, as well as detailed help.
help_Help = How to get help:\n\
\thelp commands   displays available commands and their descriptions.\n\
\thelp <command>  displays detailed help for the named command.\n\n\
Input processor:\n\
\t!!              runs most recently input command.\n\
\t!<prefix>       runs command in history with matching prefix.\n\
\tn <cmd>         runs cmd n times where n is an integer.\n\
\t<cmd> ; <cmd>   runs multiple commands separated by semicolon (;).
ERR_Help_CommandUndefined = Command {0} is not defined.

history_Description = Shows the command input history.
history_Help = Syntax: history [<N>]\n\
Displays the command input history up to a preset limit.\n\
With an argument in the form of a natural, sets the history size\n\
limit to that value.
ERR_History_InvalidSize = History size must be a natural number.

lines_Description = Indicates which lines of a class or method have code.
lines_Help = Syntax: lines <class> [<method>] [<loader-id>]\n\
Shows the line numbers of executable code within the named class.\n\
With the optional <method>, displays lines in that method only.\n\
Shows the class loader classname and unique ID of that instance\n\
before each instance of the class.\n\
With the optional <loader-id>, shows only matching classes loaded by\n\
the class loader with the given unique identifier (a long value).
ERR_lines_InvalidMethod = Invalid method specification: {0}
ERR_lines_InvalidLoader = Invalid classloader identifier (must be a long).
ERR_lines_AbsentInfo = No line number information for class {0}

locks_Description = Display monitor and waiting thread information for objects.
locks_Help = Syntax: locks <expr>\n\
The <expr> is an expression specifying an object.
CTL_locks_cannotGetMonitors = Cannot get monitor information.
CTL_locks_MonitorInfoFor = Monitor information for {0}:
CTL_locks_NotOwned = Not owned
CTL_locks_OwnedBy = Owned by: {0}, entry count: {1}
CTL_locks_NoWaiters = No waiters
CTL_locks_WaitingThread = Waiting thread: {0}
ERR_locks_UnsupportedOperation = Operation not supported in debuggee..

methods_Description = List the methods of a named class.
methods_Help = Syntax: methods <class-name>\n\
List the methods of the class by the given name.\n\
The class name may be prefixed or suffixed with an asterisk (*)\n\
to match any prefix or suffix. For example:\n\
\tmethods java.lang.String\n\
\tmethods java.lang.Str*\n\
\tmethods *.String\n\
\n\
See also: classes

properties_Description = Displays the system properties of the debuggee.
properties_Help = Invoke this command with no arguments to get a listing\n\
of the system property names and values in the debuggee.
CTL_properties_NoPropertiesMethod = System.getProperties() method not found.

requests_Description = Displays event requests set in the debuggee.
requests_Help = Invoke this command with no arguments to get a list of\n\
the event requests that the debugger has set in the debuggee.

run_Description = Launches debuggee VM and runs the given main class.
run_Help = Syntax: run [<class [args]]\n\
With no arguments, run will use the main class and arguments provided\n\
in a previous invocation of the command.\n\
The class name must be fully qualified (i.e. the binary name).\n\
The arguments are passed as-is to the main() method of the class.
CTL_run_activeSession = Current session still active, create another before continuing.
ERR_run_launchFailed = Failed to launch debuggee: {0}

source_Description = Displays source file related information for a class.
source_Help = Syntax: source <class>\n\
Display source file attributes for the named class. The information\n\
displayed can be useful for determining how to set your sourcepath.\n\
See the "Classpath and Sourcepath" help topic for an explanation.
CTL_source_cannotGetSourceExtension = Cannot get source debug extension from VM.
ERR_source_NoMatch = No class named {0} was found.
CTL_source_SourceName = Source name: {0}
CTL_source_DefaultStratum = Default stratum: {0}
CTL_source_DebugExt = Source debug extension: {0}
CTL_source_SourcePaths = Source paths:
CTL_source_AbsentInfo = <absent information>

sourcepath_Description = Displays or sets the sourcepath.
sourcepath_Help = Syntax: sourcepath [path]\n\
With no argument, displays the current sourcepath.\n\
With an argument, sets the current sourcepath to that which is given.
CTL_sourcepath_Nopath = (none)

threads_Description = List all threads in the VM or the threads in a group.
threads_Help = Syntax: threads [<group-name> | <group-id> | <regex>]\n\
Shows all threads in the identified thread group. The group can be\n\
identified by a group name, group ID, or a regular expression of\n\
either the name or the ID. See java.util.regex.Pattern to learn\n\
about regular expressions.\n\
\n\
If no argument is given, shows all threads in the debuggee.\n\
\n\
The current thread is indicated with a '*'.\n\
\n\
See also: threadlocks
CTL_threads_noThreads = No threads exist.
CTL_threads_noThreadsInGroup = No threads in the specified group.

threadlocks_Description = Display thread lock information.
threadlocks_Help = Syntax: threadlocks [<thread-id>|all]\n\
With no argument, displays lock info for current thread.\n\
With 'all' argument, displays lock info for all threads.\n\
With thread-id argument, displays lock info for specific thread.
CTL_threadlocks_cannotGetContendedMonitor = Cannot get contended monitor information.
CTL_threadlocks_cannotGetOwnedMonitors = Cannot get owned monitor information.
CTL_threadlocks_monitorInfo = Monitor information for thread {0}:
CTL_threadlocks_noMonitors = No monitors owned
CTL_threadlocks_notWaiting = Not waiting for a monitor
CTL_threadlocks_ownedMonitor = Owned monitor: {0}
CTL_threadlocks_waitingFor = Waiting for monitor: {0}

trace_Description = Sets the JDI debug tracing mode.
trace_Help = Syntax: trace <all|none|events|objrefs|receive|reftypes|sends>\n\
The argument is translated to one of the JDI VirtualMachine TRACE\n\
constants and VirtualMachine.setDebugTraceMode(int) is called.
CTL_trace_ModeSet = Debug trace mode has been set to {0}.\n\
Note: the messages will appear in messages.log in the userdir.\n
ERR_trace_UnknownMode = Unknown debug mode value: {0}

unalias_Description = Remove a command alias.
unalias_Help = Syntax: unalias <name>\n\
Removes the named command alias.\n\
\n\
See also: alias

vminfo_Description = Displays information about the debuggee VM.
vminfo_Help = Syntax: vminfo\n\
With an active debugging session and a thread set as the current,\n\
this command will display several pieces of information regarding\n\
the debuggee JVM.
CTL_vminfo_basedir = Base path directory:
CTL_vminfo_bcpath = Boot classpath:
CTL_vminfo_cpath = Classpath:
CTL_vminfo_numprocs = Number of processors:
CTL_vminfo_freemem = Free memory:
CTL_vminfo_maxmem = Maximum memory:
CTL_vminfo_stratum = Default stratum:
CTL_vminfo_totalmem = Total memory:
ERR_vminfo_nothread = Set current thread to get additional information.
ERR_vminfo_InvocationFailed = Method invocation failed

where_Description = Displays the call stack for one or all threads.
where_Help = Syntax: where [<thread-name> | all]\n\
Displays the call stack of the current thread, or with the\n\
name of a thread, displays that thread's call stack. Use\n\
the 'all' keyword to show the stack for all threads.\n\
The 'pc' field refers to the byte code offset within a method.
CTL_where_absentInfo = <absent information>
CTL_where_emptyStack = (empty stack)
CTL_where_native = native
CTL_where_header = Stack for thread {0}:
