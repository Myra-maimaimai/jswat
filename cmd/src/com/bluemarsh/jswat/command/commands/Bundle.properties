#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License (the License). You may not use this file except in
# compliance with the License..
#
# You can obtain a copy of the License at http://www.netbeans.org/cddl.html
# or http://www.netbeans.org/cddl.txt.
#
# When distributing Covered Code, include this CDDL Header Notice in each file
# and include the License file at http://www.netbeans.org/cddl.txt.
# If applicable, add the following below the CDDL Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# The Original Software is JSwat. The Initial Developer of the Original
# Software is Nathan L. Fiedler. Portions created by Nathan L. Fiedler
# are Copyright (C) 2005-2009. All Rights Reserved.
#
# Contributor(s): Nathan L. Fiedler.
#
# $Id$
#

ERR_AbsentInformation = Missing source information for class: {0}
ERR_AmbiguousClass = Ambiguous class name: {0}
ERR_AmbiguousMethod = Ambiguous method name: {0}
ERR_ClassNotFound = Specified class not found: {0}
ERR_ClassNotPrepared = Class not prepared.
ERR_EvaluationError = Evaluation failed: {0}
ERR_ExprNotAnObject = Expression does not refer to an object reference.
ERR_InvalidNumber = Invalid number format: {0}
ERR_InvalidStackFrame = Invalid stack frame index, or thread not started.
ERR_InvalidThreadID = Invalid or unknown thread identifier.
ERR_MalformedClass = Malformed class name: {0}
ERR_MalformedField = Malformed field name: {0}
ERR_MalformedMethod = Malformed method name: {0}
ERR_NativeMethod = Native method, no debugging information available.
ERR_NoThread = No current thread has been set.
ERR_NoVariableInfo = There is no variable information for this class.\n\
Make sure to compile your classes with 'javac -g'.
ERR_ObjectCollected = Object has been garbage collected, no information available.
ERR_ThreadNoStack = Thread has not started (it has no stack).
ERR_ThreadNotFound = Thread {0} not found.
ERR_ThreadNotSuspended = The selected thread is not suspended.
ERR_IncompatibleThread = Thread has not started running or is not suspended.

alias_Description = Create a command alias, or display alias definitions.
alias_Help = Syntax: alias [<name> [<input>]]\n\
Subsequent uses of 'name' will invoke 'input'.\n\
With no arguments, shows all defined aliases.\n\
With one argument, shows the definition of the named alias.\n\
\n\
Examples:\n\
\talias ali1 cmd arg1 arg2\n\
\talias ali2 cmd "argument;with;semicolons"\n\
\talias macro "cmd1 ; cmd2 ; cmd3"\n\
\n\
See also: unalias
CTL_Alias_Definition = Alias {0} is {1}
ERR_Alias_Undefined = Alias {0} is undefined.

apropos_Description = Searches the command descriptions for keywords.
apropos_Help = Syntax: apropos <regex>\n\
Searches the command descriptions for the given regular expression\n\
and displays matching commands and their descriptions.\n\
See java.util.regex.Pattern to learn about regular expressions.\n\
\n\
See also: 'help commands'

attach_Description = Attaches to a remote debuggee.
attach_Help = Syntax: attach [<process id>|<host:port>|<shared name>]\n\
By default, attaches using the previously successful address.\n\
Can attach using a process identifier (must be a non-zero integer),\n\
a shared memory name (must not be a number), or by host and port,\n\
where host name (or IP address) is required (may be 'localhost').
CTL_attach_activeSession = Current session still active, create another before continuing.
ERR_attach_NoAddress = Do not know what to attach to, please provide the address.
ERR_attach_UnsupportedConnector = Unsupported connector type: {0}
ERR_attach_BadConnectorArgs = Illegal connector arguments.
ERR_attach_IOError = I/O error while attaching.
ERR_attach_Disconnected = VM disconnected unexpectedly.
ERR_attach_BadStart = VM faulted during startup.
ERR_attach_NoAttaching = No attaching connector available. Try another JVM.

break_Description = Create a new breakpoint.
break_Help = Syntax (1): break\n\
Lists current breakpoints. The number in brackets is the unique\n\
breakpoint number, which is used by various breakpoint-related\n\
commands. The * following the brackets indicates the breakpoint\n\
is enabled, while the - indicates it is disabled. Following that\n\
is a description of the breakpoint.\n\
\n\
Syntax (2): break [go|thread] [<class>:]<line>\n\
\tSets breakpoint in class at specified source line.\n\
\tThe class is optional if the current location is set.\n\
\tExamples:\n\
\t\tbreak pkg.MyClass:123\n\
\t\tbreak OtherClass:321\n\
\t\tbreak 200\n\
\n\
Syntax (3): break [go|thread] [path/to/file.ext:]<line>\n\
\tSets breakpoint at the source line with the named file.\n\
\tThis is useful if the source file is not easily discovered.\n\
\tExample:\n\
\t\tbreak java/lang/String.java:123\n\
\n\
Syntax (4): break [go|thread] [<class>:]<method>([<arg-list>])\n\
\tSets breakpoint in class at specified method.\n\
\tThe class is optional if the current location is set.\n\
\tArgument list consists of primitives and class names,\n\
\tseparated by commas. Classes in 'java.lang' are matched\n\
\tautomatically when not fully-qualified.\n\
\tExamples:\n\
\t\tbreak pkg.MyClass.doIt(int[])\n\
\t\tbreak OtherClass.doIt(boolean, String, java.net.URL)\n\
\t\tbreak doIt\n\
\n\
The 'go' and 'thread' options control which threads in the VM\n\
are suspended when the event occurs. 'go' suspends no threads,\n\
while 'thread' causes only the event thread to stop.\n\
The default is for all threads in the debuggee to suspend.\n\
\n\
See also: clear, disable, enable
CTL_Break_Added = Breakpoint added.

catch_Description = Stop when an exception is thrown.
catch_Help = catch [go|thread] [caught|uncaught] <class>\n\
Stops the debuggee whenever an exception of the given class is thrown.\n\
\n\
The 'go' and 'thread' options control which threads in the VM\n\
are suspended when the event occurs. 'go' suspends no threads,\n\
while 'thread' causes only the event thread to stop.\n\
The default is for all threads in the debuggee to suspend.\n\
\n\
If 'caught' is given, stops only when exception is caught.\n\
If 'uncaught' is given, stops only when exception is not caught.\n\
By default, stops for all exceptions, whether caught or not.\n\
\n\
See also: clear, disable, enable
CTL_catch_Added = Exception breakpoint added.

classbrk_Description = Stops when a class is prepared or unloaded.
classbrk_Help = Syntax: classbrk [go|thread] [prepare|unload] [<class>]\n\
Stops whenever a class is either prepared or unloaded.\n\
\n\
The 'go' and 'thread' options control which threads in the VM are\n\
suspended when the event occurs. 'go' suspends no threads, and\n\
'thread' suspends only the event thread. The default is for all\n\
threads in the debuggee to suspend.\n\
\n\
The <class> filter controls which classes to monitor. The filter\n\
can be wild-carded to match more than one class, for example\n\
java.lang.* or *String.\n\
\n\
See also: clear, disable, enable, filter
CTL_classbrk_Added = Added class breakpoint.

classes_Description = Shows the list of loaded classes in the debuggee.
classes_Help = Syntax: classes [pattern]\n\
By default shows all of the loaded classes. With a pattern, displays\n\
those classes that match the pattern. The pattern may be prefixed or\n\
suffixed with an asterisk (*) to match any prefix or suffix. For example:\n\
\tclasses java.lang.*\n\
\tclasses java.lang.Str*\n\
\tclasses *.String\n\
\n\
See also: fields, methods
CTL_classes_NoClassLoader = no class loader
CTL_classes_NoneLoaded = No matching classes loaded.

classpath_Description = Displays or sets the classpath.
classpath_Help = Syntax: classpath [path]\n\
With no argument, displays the current classpath.\n\
With an argument, sets the current classpath to that which is given.
CTL_classpath_Nopath = (none)

clear_Description = Remove a breakpoint.
clear_Help = clear <n>...|all\n\
Removes the breakpoints identified by the given unique numbers.\n\
Use the break command to list the breakpoints with their numbers.\n\
With 'all' argument, removes all breakpoints.\n\
\n\
See also: break, disable, enable
ERR_Clear_NotFound = Breakpoint(s) not found.
CTL_Clear_Removed = Removed {0} breakpoint(s).

condition_Description = Add or remove conditions from breakpoints.
condition_Help = Syntax: condition list <n>\n\
Lists the conditions associated with the breakpoint by the given number.\n\
\n\
Syntax: condition add <n> <conditional>\n\
Sets the conditional for the given breakpoint. The conditional is any\n\
boolean expression, using any of ==, !=, <, >, <=, >=, &&, and ||.\n\
\n\
Syntax: condition del <n> [<conditional>]\n\
Removes the conditional associated with the given breakpoint. If no\n\
conditional is given, removes all conditions from the breakpoint.\n\
\n\
See also: break, clear
ERR_condition_NotFound = Breakpoint(s) not found.
ERR_condition_UnknownCmd = Unknown subcommand: {0}
CTL_condition_Added = Condition added.
CTL_condition_Removed = Condition(s) removed.

continue_Description = Resumes the debuggee VM.
continue_Help = Syntax: continue\n\
Note that you can use a unique prefix, such as 'cont', instead of the\n\
full name of the command.

detach_Description = Detaches from the debuggee, leaving it running.
detach_Help = Syntax: detach

disable_Description = Disables one or more breakpoints.
disable_Help = Syntax: disable <n> ...|all\n\
Disables the breakpoints identified by the given unique numbers.\n\
Use the break command to list the breakpoints with their numbers.\n\
With 'all' argument, disables all breakpoints.\n\
\n\
See also: break, clear, enable
ERR_disable_NotFound = Breakpoint(s) not found.
CTL_disable_Disabled = Disabled {0} breakpoint(s).

disablegc_Description = Disables garbage collection for an object.
disablegc_Help = Syntax: disablegc <expr>\n\
The <expr> argument is an expression specifying an object which\n\
is visible in the current scope.\n\
\n\
See also: enablegc
CTL_disablegc_CollectionDisabled = Garbage collection disabled.

down_Description = Move the current stack frame index downward.
down_Help = Syntax: down [<count>]\n\
Moves down the stack by one (or <count>) frame(s). Down means that\n\
the frame index value becomes lower.\n\
\n\
See also: frame, up

elements_Description = Displays elements of arrays, maps, and collections.
elements_Help = Syntax: elements [<start> [<end>]] <expr>\n\
Evaluates the expression expecting an array, Map, or Collection.\n\
Displays the elements between start and end (inclusive).\n\
Defaults to displaying the entire collection.
ERR_elements_IsNull = Referenced object is null.
ERR_elements_MapNoIndex = Warning: maps have no indices; start/end ignored.
ERR_elements_NotCollection = Referenced object is not a Collection.

enable_Description = Enables one or more breakpoints.
enable_Help = Syntax: enable <n>...|all\n\
Enables the breakpoints identified by the given unique numbers.\n\
Use the break command to list the breakpoints with their numbers.\n\
With 'all' argument, enables all breakpoints.\n\
\n\
See also: break, clear, disable
ERR_enable_NotFound = Breakpoint(s) not found.
CTL_enable_Enabled = Enabled {0} breakpoint(s).

enablegc_Description = Enables garbage collection for an object.
enablegc_Help = Syntax: enablegc <expr>\n\
The <expr> argument is an expression specifying an object which\n\
is visible in the current scope.\n\
\n\
See also: enablegc
CTL_enablegc_CollectionEnabled = Garbage collection enabled.

evaluate_Description = Evaluates a Java-like expression and shows the result.
evaluate_Help = Syntax: evaluate <expression>\n\
Most forms of Java expressions are supported, including operators,\n\
method invocations, field and variable references, and type-casting.\n\
See the built-in help in the graphical version of JSwat for the\n\
complete list. In short, what is not supported is the new and super\n\
keywords, conditional expressions with the ternary operator (?:),\n\
and method invocations on string literals (e.g. "foo".length()).\n\
\n\
Note that with the evaluate command, you can alter field and variable\n\
values using the assignment (=) operator (e.g. var = <expr>).

events_Description = Sets the JDI event tracing mode.
events_Help = Syntax: events <all|none|events|objrefs|receive|reftypes|sends>\n\
The argument is translated to one of the JDI VirtualMachine TRACE\n\
constants and VirtualMachine.setDebugTraceMode(int) is called.
CTL_events_ModeSet = Debug trace mode has been set to {0}.
ERR_events_UnknownMode = Unknown debug mode value: {0}

exclude_Description = Manage the set of single stepping exclusions.
exclude_Help = Syntax: exclude [<excludes>|none]\n\
With no arguments, displays the current set of stepping exclusions.\n\
If an argument is given, it should consist of a set of class or package\n\
names, possibly with leading or trailing wildcards, separated by commas.\n\
The only supported wildcard is the asterisk (*), which matches all names.\n\
\n\
For example, 'excludes java.lang.*,com.sun.*' would skip stepping into\n\
all classes within the java.lang package, and its subpackages, as well\n\
as those in the com.sun package (and subpackages).\n\
\n\
If 'none' is given, then all stepping exclusions are removed.
CTL_excludes_NoExclusions = No exclusions.
ERR_exclude_InvalidPattern = Invalid class pattern {0}

fields_Description = Displays the fields for the named class.
fields_Help = Syntax: fields <class-name>\n\
List the fields of the class by the given name.\n\
The class name may be prefixed or suffixed with an asterisk (*)\n\
to match any prefix or suffix. For example:\n\
\tfields java.lang.String\n\
\tfields java.lang.Str*\n\
\tfields *.String\n\
\n\
See also: classes, methods
CTL_fields_Header = Class {0}:\n
CTL_fields_Hidden = (hidden)
CTL_fields_Inherited = (inherited from {0})

filter_Description = Add and remove class/thread filters on breakpoints.
filter_Help = Syntax: filter list <n>\n\
Lists the class and thread filters on the breakpoint identified by\n\
the given number.\n\
\n\
Syntax: filter add <n> c:<class>|t:<thread>\n\
Sets either the class (c:...) or thread (t:...) filter of the breakpoint\n\
identified by the given number. The argument must begin with either c:\n\
or t: to indicate the type of filter.\n\
If c: is used, the class name can have a single wildcard (*) at either\n\
the beginning or end of the name (e.g. java.lang.* or *.String).\n\
If t: is used, the thread can be identified either by the unique number\n\
assigned to it at runtime, or by its name, if one has been set.\n\
\n\
Syntax: filter del <n> [class|thread]\n\
Removes the filter of the given type from the breakpoint identified by\n\
the given number. By default removes both types of filters.\n\
\n\
See also: break, clear, condition, monitor
ERR_filter_InvalidType = Invalid filter type: {0}
ERR_filter_NotFound = Breakpoint(s) not found.
ERR_filter_UnknownCmd = Unknown subcommand: {0}
ERR_filter_NoFilter = Breakpoint does not support this type of filter.
CTL_filter_Filters = Class: {0}\nThread: {1}
CTL_filter_Added = Filter added.
CTL_filter_Removed = Filter(s) removed.

frame_Description = Changes the stack frame for the current thread.
frame_Help = Syntax: frame <index>\n\
Sets the given, zero-based, frame index as the current stack frame.\n\
\n\
See also: down, up

help_Description = Describes the available commands, as well as detailed help.
help_Help = How to get help:\n\
\thelp commands   displays available commands and their descriptions.\n\
\thelp <command>  displays detailed help for the named command.\n\n\
Input processor:\n\
\t!!              runs most recently input command.\n\
\t!<prefix>       runs command in history with matching prefix.\n\
\tn <cmd>         runs cmd n times where n is an integer.\n\
\t<cmd> ; <cmd>   runs multiple commands separated by semicolon (;).
ERR_Help_CommandUndefined = Command {0} is not defined.

history_Description = Shows the command input history.
history_Help = Syntax: history [<N>]\n\
Displays the command input history up to a preset limit.\n\
With an argument in the form of a natural, sets the history size\n\
limit to that value.
ERR_History_InvalidSize = History size must be a natural number.

interrupt_Description = Sends an interrupt signal to a thread.
interrupt_Help = Syntax: interrupt <thread id>|<thread name>\n\
Causes the identified thread to be interrupted. What this will\n\
actually achieve is entirely dependent on your application.
CTL_interrupt_Interrupted = Thread {0} interrupted.

kill_Description = Attempt to terminate a thread using a throwable.
kill_Help = Syntax: kill <thread-id> <expr>\n\
The thread identifier may be a unique thread number or name. Use the\n\
threads command to get names and identifiers.\n\
\n\
The expression must evaluate to an instance of java.lang.Throwable.\n\
\n\
See also: interrupt, threads
ERR_kill_NotThrowable = Object is not a Throwable.
CTL_kill_Signaled = Thread stop invoked on thread {0}.

lines_Description = Indicates which lines of a class or method have code.
lines_Help = Syntax: lines <class> [<method>] [<loader-id>]\n\
Shows the line numbers of executable code within the named class.\n\
With the optional <method>, displays lines in that method only.\n\
Shows the class loader classname and unique ID of that instance\n\
before each instance of the class.\n\
With the optional <loader-id>, shows only matching classes loaded by\n\
the class loader with the given unique identifier (a long value).
ERR_lines_InvalidMethod = Invalid method specification: {0}
ERR_lines_InvalidLoader = Invalid classloader identifier (must be a long).
ERR_lines_AbsentInfo = No line number information for class {0}

locals_Description = Displays visible variables in selected stack frame.
locals_Help = Syntax: locals [frame]\n\
Displays the visible variables in the stack frame, including fields\n\
and local variables. Any fields shadowed by a local variable will\n\
not be shown. Static final fields are also not shown as they are\n\
assumed to be constant and not generally interesting.\n\
\n\
With the optional frame index (a zero-based integer value), displays\n\
the variables visible in that stack frame.\n\
\n\
Legend:\n\
\t.\tfield\n\
\t:\tstatic field\n\
\t(\tparameter\n\
\t<space>\tlocal variable\n\
\n\
See also: thread
CTL_locals_None = (none)

locks_Description = Display monitor and waiting thread information for objects.
locks_Help = Syntax: locks <expr>\n\
The <expr> is an expression specifying an object.
CTL_locks_cannotGetMonitors = Cannot get monitor information.
CTL_locks_MonitorInfoFor = Monitor information for {0}:
CTL_locks_NotOwned = Not owned
CTL_locks_OwnedBy = Owned by: {0}, entry count: {1}
CTL_locks_NoWaiters = No waiters
CTL_locks_WaitingThread = Waiting thread: {0}
ERR_locks_UnsupportedOperation = Operation not supported in debuggee..

methods_Description = List the methods of a named class.
methods_Help = Syntax: methods <class-name>\n\
List the methods of the class by the given name.\n\
The class name may be prefixed or suffixed with an asterisk (*)\n\
to match any prefix or suffix. For example:\n\
\tmethods java.lang.String\n\
\tmethods java.lang.Str*\n\
\tmethods *.String\n\
\n\
See also: classes, fields

monitor_Description = Add or remove monitors from breakpoints.
monitor_Help = Syntax: monitor list <n>\n\
Lists the monitors associated with the breakpoint by the given number.\n\
\n\
Syntax: monitor add <n> <expr>\n\
Adds the expression monitor for the given breakpoint. The expression is\n\
any valid Java expression that the expression evaluator can evaluate\n\
with a debugging context (e.g. field references, method invocations).\n\
\n\
Syntax: monitor del <n> [<expr>]\n\
Removes the monitor associated with the given breakpoint. If no\n\
expression is given, removes all monitors from the breakpoint.\n\
\n\
See also: break, clear
ERR_monitor_NotFound = Breakpoint(s) not found.
ERR_monitor_UnknownCmd = Unknown subcommand: {0}
CTL_monitor_Added = Monitor added.
CTL_monitor_Removed = Monitor(s) removed.

next_Description = Steps one line, stepping over method calls.
next_Help = Syntax: next\n\
Performs a single step operation, stepping over method calls.

properties_Description = Displays the system properties of the debuggee.
properties_Help = Invoke this command with no arguments to get a listing\n\
of the system property names and values in the debuggee.
CTL_properties_NoPropertiesMethod = System.getProperties() method not found.

redefine_Description = Redefines a class with new byte code.
redefine_Help = Syntax: redefine <class> [<class-file>]\n\
Redefines the bytecode for the named class. If the class-file argument\n\
is given, the byte code is read from that file. Otherwise, the debugger\n\
will attempt to locate the .class file and use that for the bytecode.\n\
\n\
Use of this command involves understanding the many effects that class\n\
redefinition will have not only on the current state of the debugger,\n\
but also on your running application. See the Java Debug Interface\n\
documentation (included in the JDK docs) for more information. In\n\
particular, see the com.sun.jdi.VirtualMachine.redefineClasses() method.\n\
\n\
See also: classes, methods
ERR_redefine_MissingClass = Class {0} cannot be found.
ERR_redefine_MissingFile = File {0} cannot be found.
ERR_redefine_MissingBytes = Bytecode for {0} cannot be found.
ERR_redefine_IOError = I/O error reading class file.
ERR_redefine_Failed = Redefining the class failed: {0}
CTL_redefine_Redefined = Class redefined.

requests_Description = Displays event requests set in the debuggee.
requests_Help = Invoke this command with no arguments to get a list of\n\
the event requests that the debugger has set in the debuggee.

resume_Description = Resumes some or all threads in the debuggee.
resume_Help = Syntax: resume [thread id(s)]\n\
By default, resumes all threads in the debuggee (like continue).\n\
The thread id values must match either the unique thread identifer,\n\
or the name of the thread. Threads are resumed in the order specified.

run_Description = Launches debuggee VM and runs the given main class.
run_Help = Syntax: run [<class [args]]\n\
With no arguments, run will use the main class and arguments provided\n\
in a previous invocation of the command.\n\
The class name must be fully qualified (i.e. the binary name).\n\
The arguments are passed as-is to the main() method of the class.\n\
\n\
To set the classpath for the debuggee, use the classpath command.\
\n\
To define the options to be passed to the Java VM, use the runtime\n\
command with the opt subcommand.
CTL_run_activeSession = Current session still active, create another before continuing.
ERR_run_launchFailed = Failed to launch debuggee: {0}

runtime_Description = Manages the Java runtimes for launching the debuggee.
runtime_Help = Syntax: runtime add path [exe]\n\
Adds the given path, and optional executable name (e.g. java.exe),\n\
to the list of available runtimes for launching a debuggee.\n\
The path must point to a valid Java runtime installation.\n\
\n\
Syntax: runtime\n\
List the currently defined runtimes and their unique identifiers.\n\
These identifiers are to be used with the following subcommands.\n\
\n\
Syntax: runtime del <runtime id>\n\
Removes the given runtime from the list of available runtimes.\n\
\n\
Syntax: runtime use <runtime id>\n\
Sets the identified runtime as the default for the current session.\n\
\n\
Syntax: runtime opt [<options>]\n\
Sets the JVM options to be used when launching a debuggee for the\n\
current session. If the options are not given, resets the JVM options\n\
to the default for that JVM. Note that any use of -cp or -classpath\n\
should be avoided; set the classpath for the current session by using\n\
the classpath command.
ERR_runtime_Invalid = Invalid runtime path.
ERR_runtime_Subcommand = Unknown subcommand: {0}
ERR_runtime_Unknown = Unknown Java runtime identifier: {0}

session_Description = Create, rename, copy, and delete sessions.
session_Help = Syntax: session\n\
List all available sessions, along with the session identifier.\n\
This identifer is to be used in the following subcommands.\n\
\n\
Syntax: session create [name]\n\
Creates a new session, generating a unique identifier and assigning\n\
it the given name, or generating a name if none is given.\n\
\n\
Syntax: session copy [id]\n\
Copies the identified session, or the current one if no identifier\n\
is given. The name of the copy is generated and can be changed with\n\
the rename subcommand.\n\
\n\
Syntax: session rename <id> <name>\n\
Renames the identified session.\n\
\n\
Syntax: session use <id>\n\
Sets the identified session to be the current one.\n\
\n\
Syntax: session delete <id>\n\
Deletes the identified session. Note that you cannot delete the\n\
current session. Use the use subcommand to switch first, then rename.\n\
\n\
Syntax: session prop <id> [<name> <value>]\n\
Displays or modifies the session properties. With no arguments, shows\n\
all of the defined session properties. If a name and value are given,\n\
the property is set within the session. A 'null' value removes the\n\
property from the session.
ERR_session_Subcommand = Unknown subcommand: {0}
ERR_session_Unknown = Unknown session identifier: {0}
ERR_session_DeleteCurrent = Cannot delete the current session.

shutdown_Description = Detaches from the debuggee and terminates it.
shutdown_Help = Syntax: shutdown

source_Description = Displays source file related information for a class.
source_Help = Syntax: source <class>\n\
Display source file attributes for the named class. The information\n\
displayed can be useful for determining how to set your sourcepath.\n\
See the "Classpath and Sourcepath" help topic for an explanation.
CTL_source_cannotGetSourceExtension = Cannot get source debug extension from VM.
ERR_source_NoMatch = No class named {0} was found.
CTL_source_SourceName = Source name: {0}
CTL_source_DefaultStratum = Default stratum: {0}
CTL_source_DebugExt = Source debug extension: {0}
CTL_source_SourcePaths = Source paths:
CTL_source_AbsentInfo = <absent information>

sourcepath_Description = Displays or sets the sourcepath.
sourcepath_Help = Syntax: sourcepath [path]\n\
With no argument, displays the current sourcepath.\n\
With an argument, sets the current sourcepath to that which is given.
CTL_sourcepath_Nopath = (none)

step_Description = Steps one line, stepping into method calls.
step_Help = Syntax: step [out]\n\
Performs a single step operation, stepping into method invocations.\n\
With the 'out' argument, steps out of the current method.

stepi_Description = Steps one instruction, stepping into method calls.
stepi_Help = Syntax: stepi\n\
Performs a single instruction step operation, stepping into method calls.

suspend_Description = Suspends some or all threads in the debuggee.
suspend_Help = Syntax: suspend [thread id(s)]\n\
By default, suspends all threads in the debuggee.\n\
The thread id values must match either the unique thread identifer,\n\
or the name of the thread. Threads are suspended in the order specified.

thread_Description = Sets the current thread, or displays it.
thread_Help = Syntax: thread [tid]\n\
With no argument, displays information for the current thread.\n\
With an argument, set the identified thread as the current one.\n\
The thread identifier may be a unique thread number or name.

threadbrk_Description = Stops whenever a thread starts or dies.
threadbrk_Help = Syntax: threadbrk [go|thread] [start|death] [<thread>]\n\
Stops whenever a thread is either started or dies.\n\
\n\
The 'go' and 'thread' options control which threads in the VM are\n\
suspended when the event occurs. 'go' suspends no threads, and\n\
'thread' suspends only the event thread. The default is for all\n\
threads in the debuggee to suspend.\n\
\n\
The <thread> filter controls which threads to monitor. The filter may\n\
be a unique thread number or name. Use the threads command to get names\n\
and identifiers.\n\
\n\
See also: clear, disable, enable, filter
CTL_threadbrk_Added = Thread breakpoint added.

threads_Description = List all threads in the VM or the threads in a group.
threads_Help = Syntax: threads [<group-name> | <group-id> | <regex>]\n\
Shows all threads in the identified thread group. The group can be\n\
identified by a group name, group ID, or a regular expression of\n\
either the name or the ID. See java.util.regex.Pattern to learn\n\
about regular expressions.\n\
\n\
If no argument is given, shows all threads in the debuggee.\n\
\n\
The current thread is indicated with a '*'.\n\
\n\
See also: threadgroups
CTL_threads_noThreads = No threads exist.
CTL_threads_noThreadsInGroup = No threads in the specified group.

threadlocks_Description = Display thread lock information.
threadlocks_Help = Syntax: threadlocks [<thread-id>|all]\n\
With no argument, displays lock info for current thread.\n\
With 'all' argument, displays lock info for all threads.\n\
With thread-id argument, displays lock info for specific thread.
CTL_threadlocks_cannotGetContendedMonitor = Cannot get contended monitor information.
CTL_threadlocks_cannotGetOwnedMonitors = Cannot get owned monitor information.
CTL_threadlocks_monitorInfo = Monitor information for thread {0}:
CTL_threadlocks_noMonitors = No monitors owned
CTL_threadlocks_notWaiting = Not waiting for a monitor
CTL_threadlocks_ownedMonitor = Owned monitor: {0}
CTL_threadlocks_waitingFor = Waiting for monitor: {0}

threadgroups_Description = List all thread groups, or groups within a group.
threadgroups_Help = Syntax: threadgroups [<group name>|<group id>]\n\
Shows all thread groups in the identified group. The group can be\n\
identified by a group name, group ID, or regular expression of\n\
either the name or the ID. See java.util.regex.Pattern to learn\n\
about regular expressions.\n\
\n\
If no argument is given, shows all thread groups in the debuggee.\n\
\n\
See also: threads
CTL_threadgroups_NoGroups = No thread groups exist.
CTL_threadgroups_NoGroupsInGroup = No thread groups in the specified group.

trace_Description = Trace method entry and exit for a thread and/or class.
trace_Help = Syntax: trace [go|thread] [enter|exit] [c:<class>] [t:<thread-id>]\n\
Stops each time a method is entered and exited. If 'go' is given,\n\
no threads are suspended, while 'event' suspends only the one thread.\n\
The default is for all threads to suspend.\n\
\n\
With c:<class> filter, only methods in the matching class(es) are shown.\n\
The <class> argument can be wild-carded to match more than one class,\n\
for example java.lang.* or *String.\n\
\n\
With t:<thread-id> filter, only methods invoked in that thread are\n\
shown. The <thread-id> can be a thread number or a thread name.\n\
\n\
See also: clear, disable, enable, filter
ERR_trace_UnknownFilter = Unknown filter: {0}
CTL_trace_Added = Added trace breakpoint.

unalias_Description = Remove a command alias.
unalias_Help = Syntax: unalias <name>\n\
Removes the named command alias.\n\
\n\
See also: alias

up_Description = Move the current stack frame index upward.
up_Help = Syntax: up [<count>]\n\
Moves up the stack by one (or <count>) frame(s). Up means that\n\
the frame index value becomes higher.\n\
\n\
See also: down, frame

view_Description = Show source code for a file or class.
view_Help = Syntax: view [<file>|<class>] [@<line>] [+<count>]\n\
If the first argument appears to be a class name, then an attempt to find\n\
its corresponding source file is made. If it is a file path, then the\n\
given file is used (both a path relative to the classpath/sourcepath, as\n\
well as an absolute path, are allowed). If no name is given, the current\n\
debugging location is used.\n\
\n\
If the @<line> argument is given, then the code starting at that line is\n\
shown. Any out of range values are equivalent to the closest allowable\n\
value.\n\
\n\
If the +<count> argument is given, then that many lines of source code\n\
are shown. The default is 10 lines.
ERR_view_NoContext = Need file or class name when there is no current location.
ERR_view_NotFound = Source code not found.
ERR_view_MissingFile = File not found: {0}
ERR_view_IOError = I/O error reading file.

vminfo_Description = Displays information about the debuggee VM.
vminfo_Help = Syntax: vminfo\n\
Displays diagnostic information about the connected debuggee, including\n\
the classpaths, default stratum, version, and base directory.
CTL_vminfo_version = Java VM version:
CTL_vminfo_basedir = Base path directory:
CTL_vminfo_bcpath = Boot classpath:
CTL_vminfo_cpath = Classpath:
CTL_vminfo_stratum = Default stratum:

watch_Description = Stop when a field is accessed or modified.
watch_Help = Syntax: watch [go|thread] [access|modify] <class>.<field>\n\
Stops when the field of the named class is accessed or modified.\n\
\n\
The 'go' and 'thread' options control which threads in the VM are\n\
suspended when the event occurs. 'go' suspends no threads, and 'thread'\n\
suspends only the event thread. The default is for all threads in the\n\
debuggee to suspend.\n\
\n\
If 'access' is given, stops only when field is accessed.\n\
If 'modify' is given, stops only when field is modified.\n\
By default, stops when field is accessed or modified.\n\
\n\
See also: fields
ERR_watch_MissingClass = Missing class part of field specifier: {0}
CTL_watch_Added = Watch breakpoint added.

where_Description = Displays the call stack for one or all threads.
where_Help = Syntax: where [<thread-name> | all]\n\
Displays the call stack of the current thread, or with the\n\
name of a thread, displays the call stack for that thread. Use\n\
the 'all' keyword to show the stack for all threads.\n\
The 'pc' field refers to the byte code offset within a method.
CTL_where_absentInfo = <absent information>
CTL_where_emptyStack = (empty stack)
CTL_where_native = native
CTL_where_header = Stack for thread {0}:
