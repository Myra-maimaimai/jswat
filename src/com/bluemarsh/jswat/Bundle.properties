######################################################################
#
#       Copyright (C) 2001-2005 Nathan Fiedler
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
# $Id: Bundle.properties 1814 2005-07-17 05:56:32Z nfiedler $
#
######################################################################

######################################################################
#               VMConnection resources
######################################################################

# Launching the VM failed for some reason.
VMConn.causeOfDeath = Cause of death:
# This is a guess as to the launch failure.
VMConn.checkClassExists = Check that debuggee class exists.
# Displayed when exception occurs reading output from debuggee VM.
VMConn.errorReadingOutput = Unable to display process output

######################################################################
#               Session resources
######################################################################

Session.checkInputOutput = Check the output display for any possible errors.
Session.deactivating = Deactivating debugging session...
Session.errorReadingFile = Error reading file:
Session.sessionEnded = Session ended
Session.sessionFileHeader = JSwat session settings
Session.sessionFileCannotBeRead = Cannot read .jswat_session file.
Session.sessionFileReadError = Error reading .jswat_session file:
Session.sessionFileWriteError = Error writing .jswat_session file:
Session.stepping = Stepping
Session.vmAttached = Attached to remote VM
Session.vmClosed = Debuggee VM closed
Session.vmDetached = Detached from remote VM
Session.vmDisconnected = Disconnected from debuggee VM
Session.vmLoaded = VM loaded
Session.vmRunning = VM running
Session.vmSuspended = VM suspended

######################################################################
#               CommandManager resources
######################################################################

# Printed from 'unalias' when argument not found.
CommandManager.aliasNotFound = Alias not found.

# Printed from 'unalias' when argument was removed.
CommandManager.aliasRemoved = Alias removed.

# Displayed when an ambiguous command prefix was entered by the user.
CommandManager.ambiguousMatch = Ambiguous command prefix:

# JSwat attempted to create a command object but failed.
CommandManager.cantInstantiateCommand = Command could not be instantiated:

# User entered an unknown command.
CommandManager.commandNotFound = Command not found:

# The properties file is missing the 'commands' list.
CommandManager.errorCommandList = Internal error: 'commands' list missing

# Command could not be found by the CommandManager.
CommandManager.errorCommandLoad = (Could not load command)

# CommandManager could not find the script file.
CommandManager.errorReadingFile = Error reading file:

# Failed to run a user-invoked command.
CommandManager.errorRunningCommand = Error while running command.

# Displayed at top of command history list.
CommandManager.historyHeader = Command history:

# User tried to use ! but jswat couldn't find a matching command
# in the history chain.
CommandManager.historyNotFound = No matching command found in history.

# Displayed at top of command aliases list.
CommandManager.listOfAliases = List of command aliases:

# Displayed at top of command list.
CommandManager.listOfCommands = List of supported commands:

# Displayed at top of command macros list.
CommandManager.listOfMacros = List of command macros:
CommandManager.noAliases = No aliases have been defined.
CommandManager.noHistory = No commands in history.
CommandManager.noMacros = No macros have been defined.

# CommandManager is about to parse a command script.
CommandManager.parsingScript = Parsing command script...

# User entered an unknown command, tell them how to get help.
CommandManager.useHelpCommands = Use 'help commands' for more information.

#
# List of availble JSwat commands. These are used in the 'help commands'
# function. If your command is not listed here it can still be invoked,
# but it will not be listed as an available command.
#
# Please keep the list in alphabetical order.
#
commands = about alias apropos attach brkinfo catch class classes \
           classpath clear close condition disable \
           disablegc down dump enable enablegc exclude exit \
           fields filter frame help history interrupt invoke kill \
           lines list listen load locals lock macro methods monitor \
           next nexti options print read resume run runto set \
           sourcepath stderr stdin stdout step stepi stop \
           suspend thread threadgroups threadlocks threads \
           trace unalias up version view vmlist where wherei
