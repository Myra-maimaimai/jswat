######################################################################
#
#       Copyright (C) 2001-2002 Nathan Fiedler
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
# PROJECT:      JSwat
# MODULE:       JSwat Commands
# FILE:         Bundle.properties
#
# AUTHOR:       Nathan Fiedler
#
# REVISION HISTORY:
#       Name    Date            Description
#       ----    ----            -----------
#       nf      05/30/01        Initial version
#       nf      09/03/01        Improved the command descriptions
#       tr      12/08/01        Added exclude command
#
# DESCRIPTION:
#       Resources for this package.
#
# $Id: Bundle.properties 629 2002-10-26 23:03:26Z nfiedler $
#
######################################################################

######################################################################
#               Common Command Messages
######################################################################

badLineNumber = Missing or invalid line number specification.
fieldNotObject = Value does not refer to an object reference.
incorrectSyntax = Incorrect syntax for this command.
invalidClassName = Invalid or unknown class name
invalidBreakpoint = Invalid breakpoint number.
invalidMethod = Invalid method specification
invalidStackFrame = Invalid stack frame index.
invalidThreadID = Invalid thread identifier.
invalidThreadGroupID = Invalid thread group identifier.
missingArguments = Missing required command arguments.
nativeMethod = Method is native, unable to execute command.
noCurrentThread = No current thread. Set current thread with 'thread' command.
noVariableInfo1 = There is no variable information for this class.
noVariableInfo2 = Make sure to compile your classes with 'javac -g'.

######################################################################
#               List of Command Descriptions
######################################################################

aboutDesc = Shows the about information for JSwat.
aliasDesc = Create a command alias, or display alias definitions.
aproposDesc = Searches the command descriptions for keywords.
attachDesc = Attach remotely to a running VM.
brkinfoDesc = Show information regarding a breakpoint.
catchDesc = Break when the specified exception is thrown.
classDesc = Display information about a class or interface.
classesDesc = List classes loaded in the debuggee VM.
classpathDesc = Displays or sets the classpath of the debuggee VM.
clearDesc = Clear a breakpoint.
closeDesc = Closes the currently active debugging session.
conditionDesc = Add or remove conditions from breakpoints.
disableDesc = Disables a breakpoint.
disablegcDesc = Disables garbage collection for an object.
downDesc = Move down the stack frame.
dumpDesc = Prints all fields of an object.
enableDesc = Enables a breakpoint.
enablegcDesc = Enables garbage collection for an object.
excludeDesc = Sets the single stepping class exclusions.
exitDesc = Closes the active debugging session, and exits JSwat if there are no more sessions.
fieldsDesc = Print names of data members of a class.
filterDesc = Adds or removes a filter from a breakpoint.
frameDesc = Set the current stack frame.
helpDesc = Explains how to use JSwat commands.
historyDesc = Shows a command history.
interruptDesc = Interrupts a given thread.
invokeDesc = Invoke a method on an object or class.
killDesc = Terminate one or all threads in the debuggee VM.
linesDesc = Print the line numbers of a method.
listDesc = Lists source code at the current stepping location.
listenDesc = Listens for a connection from a debuggee VM.
loadDesc = Create a debuggee VM to be debugged, without starting it.
localsDesc = Display visible local variables and field variables.
lockDesc = Display monitor and waiting thread information for an object.
macroDesc = Create a command macro.
methodsDesc = List methods of a class.
monitorDesc = Add or remove monitors from breakpoints.
nextDesc = Step one line, stepping over method calls.
nextiDesc = Step one instruction, stepping over method calls.
optionsDesc = Show and modify program options.
printDesc = Print a local or field variable value.
readDesc = Executes the commands in the given command file.
resumeDesc = Resume execution of one or all threads.
runDesc = Create a debuggee VM to be debugged and immediately start it.
runtoDesc = Sets a temporary breakpoint and resumes execution.
setDesc = Changes the value of a variable.
sourcepathDesc = Displays or sets the source path.
stderrDesc = Prints a message to standard error of the JSwat JVM.
stdinDesc = Sends text to the debuggee VM's standard input stream.
stdoutDesc = Prints a message to standard output of the JSwat JVM.
stepDesc = Execute a single line, stepping into methods.
stepiDesc = Execute a single instruction, stepping into methods.
stopDesc = Set a breakpoint at some location.
suspendDesc = Suspend execution of one or all threads.
threadDesc = Set the current thread.
threadgroupsDesc = List all known thread groups.
threadlocksDesc = Display thread lock information.
threadsDesc = List all known threads.
traceDesc = Trace method entry and exit events.
unaliasDesc = Remove a command alias.
upDesc = Move up the stack frame.
versionDesc = Display version information.
viewDesc = View the contents of a source file.
vmlistDesc = Shows a list of running VMs that are debuggable.
whereDesc = Display stack frame of thread(s).
whereiDesc = Display stack frame of thread(s) with pc info.

######################################################################
#               Command Help Strings
######################################################################

aliasHelp1 = Syntax: alias [<name> [<command-string>]]
aliasHelp2 = Subsequent uses of 'name' will invoke 'command-string'.
aliasHelp3 = With no arguments, shows all defined aliases.
aliasHelp4 = With one argument, shows the named alias's definition.
aliasHelp5 = See also: unalias

aproposHelp1 = Syntax: apropos <phrase>
aproposHelp2 = Searches the command descriptions for the given phrase and
aproposHelp3 = displays matching commands and their descriptions.

attachHelp1 = Syntax: attach [[<host>:]<port>]|[<share_name>]
attachHelp2 = Attaches to the debuggee VM running at the given address.
attachHelp3 = With no arguments, attaches using the previously set parameters.
attachHelp4 = If the [<host>:]<port> form is used, connects via socket.
attachHelp5 = If no host value is given, 'localhost' is assumed.
attachHelp6 = If the <share_name> form is used, connects via shared memory.
attachHelp7 = Examples:
attachHelp8 = > attach rhost:1234  (attaches to machine rhost at port 1234)
attachHelp9 = > attach 1234        (attaches to localhost at port 1234)
attachHelp10 = > attach javadebug   (attaches using shared memory name)
attachHelp11 = > attach             (attaches with the last used parameters)
attachHelp12 = See also: close, kill

brkinfoHelp1 = Syntax: brkinfo <brknum>
brkinfoHelp2 = Shows the properties for the breakpoint given by 'brknum'.
brkinfoHelp3 = See also: condition, disable, enable, filter, monitor

catchHelp1 = Syntax: catch [go|thread] <exception>
catchHelp2 = Use 'clear' command to remove the exception catch.
catchHelp3 = The 'go' and 'thread' options control which threads in the VM
catchHelp4 = are suspended when the event fires. 'go' suspends no threads,
catchHelp5 = and 'thread' suspends only the event thread.
catchHelp6 = See also: clear

classHelp1 = Syntax: class <class-id>

classesHelp1 = Syntax: classes [<pattern>]
classesHelp2 = The pattern is a fully-qualified class name, which may start
classesHelp3 = or end with a '*' wildcard, to match multiple names.

classpathHelp1 = Syntax: classpath [<path>]
classpathHelp2 = Path may contain multiple entries, separated by : or ;.
classpathHelp3 = The use of : or ; depends on your operating system.
classpathHelp4 = Without the optional path, prints the current class path.
classpathHelp5 = See also: sourcepath

clearHelp1 = clear [<n> ...]
clearHelp2 = With no arguments, displays list of all breakpoints.
clearHelp3 = With one or more breakpoint number arguments, deletes the
clearHelp4 = given breakpoints.
clearHelp5 = See also: stop, disable, enable

closeHelp1 = Syntax: close
closeHelp2 = If the session launched the debuggee VM, the VM is terminated.
closeHelp3 = If the session is a connected to a remote debuggee, the connection
closeHelp4 = is closed and the remote debuggee VM is left running.
closeHelp5 = See also: kill

conditionHelp1 = Syntax: condition add|del "<conditional>" <brk-num>
conditionHelp2 = Actions are:
conditionHelp3 = 'add' - adds a new condition to the breakpoint.
conditionHelp4 = 'del' - removes an existing condition from the breakpoint.
conditionHelp5 = The conditional must be of the form:
conditionHelp6 = "variable = value"
conditionHelp7 = (the spaces around the equals sign are optional).
conditionHelp8 = The breakpoint number specifies the breakpoint to which
conditionHelp9 = the condition is added or removed.

disableHelp1 = disable [<n> ...]
disableHelp2 = With no arguments, displays list of all breakpoints.
disableHelp3 = With one or more breakpoint number arguments, disables the
disableHelp4 = given breakpoints.
disableHelp5 = See also: enable, clear, stop

disablegcHelp1 = Syntax: disablegc <object-expr>
disablegcHelp2 = The <object-expr> is an expression specifying an object.
disablegcHelp3 = See also: enablegc

downHelp1 = Syntax: down [<n-frames>]
downHelp2 = With no argument, moves down the stack by one frame.
downHelp3 = See also: up, frame

dumpHelp1 = Syntax: dump <object-expr>
dumpHelp2 = The <object-expr> is an expression specifying an object.
dumpHelp3 = See also: print

enableHelp1 = enable [<n> ...]
enableHelp2 = With no arguments, displays list of all breakpoints.
enableHelp3 = With one or more breakpoint number arguments, enables the
enableHelp4 = given breakpoints.
enableHelp5 = See also: disable, clear, stop

enablegcHelp1 = Syntax: enablegc <object-expr>
enablegcHelp2 = The <object-expr> is an expression specifying an object.
enablegcHelp3 = See also: disablegc

excludeHelp1 = exclude [-] [<class-expr>]
excludeHelp2 = With no arguments, displays the list of classes which will
excludeHelp3 = not be stepped into.
excludeHelp4 = Without the '-', adds a class specifier to the exclusion list.
excludeHelp5 = With the '-', removes a class specifier from the exclusion list.
excludeHelp6 = <class-expr> must be a legal class specifier, optionally
excludeHelp7 = beginning or ending with a '*' wildcard.
excludeHelp8 = For example, "*.Foo" or "java.*".

fieldsHelp1 = Syntax: fields <class-id>

filterHelp1 = Syntax: filter add|del <brknum> thread <thread-id>
filterHelp2 = - Adds or removes a thread filter from the given breakpoint.
filterHelp3 = Syntax: filter add|del <brknum> class <class>
filterHelp4 = - Adds or removes a class filter from the given breakpoint.
filterHelp5 = Location breakpoints cannot have class filters.
filterHelp6 = See also: brkinfo, stop

frameHelp1 = Syntax: frame <n>
frameHelp2 = The <n> value must be between one and the frame count, inclusive.
frameHelp3 = See also: up, down

helpHelp1 = Basic command information:
helpHelp2 = \thelp commands\tdisplays list of commands and their descriptions.
helpHelp3 = \thelp <command>\tdisplays help for the given command.
helpHelp4 = \thelp <topic>\tdisplays help for the named topic.
helpHelp5 = \thelp \tenter interactive help browsing mode.

interruptHelp1 = Syntax: interrupt <thread-id>

invokeHelp1 = Syntax: invoke [objvar.|class.]method([args...])
invokeHelp2 = The 'objvar' value is an object referenced by the named variable.
invokeHelp3 = The 'class' value is a fully-qualified class name.
invokeHelp4 = Both 'objvar' and 'class' are optional -- without them, invoke
invokeHelp5 = assumes the class containing the current location.
invokeHelp6 = The arguments must be literal values or variable references.
invokeHelp7 = Invoke will display the return value of the method, if any.
invokeHelp8 = The current thread must be suspended due to a breakpoint.
invokeHelp9 = Examples:
invokeHelp10 = \tinvoke obj1.setValues("string", 1234)
invokeHelp11 = \tinvoke java.lang.String.valueOf(var1)
invokeHelp12 = \tinvoke localMethod(true, null)

killHelp1 = Syntax: kill <thread-id> ...
killHelp2 = Kills the threads given by their IDs.
killHelp3 = If no thread IDs are given, the debuggee VM is terminated.
killHelp4 = See also: close, suspend, resume

linesHelp1 = Syntax: lines <class> [<method>]
linesHelp2 = With the optional <method>, displays lines in that method only.

listHelp1 = Syntax: list [center] [count <lines>] [<line>]
listHelp2 = If 'center' is given, shows source code around the current
listHelp3 = location, rather than the code following that location.
listHelp4 = If 'count' is given, the following number indicates the number
listHelp5 = of lines to be shown.
listHelp6 = If the line argument is given, displays source code following
listHelp7 = that line, instead of using the current stepping line number.

listenHelp1 = Syntax: listen [<port>]|[<share_name>]
listenHelp2 = With no arguments, listens using a socket connector on
listenHelp3 = a port determined by the debugger.
listenHelp4 = With the <port> form, makes a socket connector on that port.
listenHelp5 = With the <share_name> form, makes a shared memory connector.
listenHelp6 = The output from 'listen' will indicate the address at which
listenHelp7 = the remote VM should connect.
listenHelp8 = See also: attach, load, run

loadHelp1 = Syntax: load [<jvm args>] [<classname> [<class args>]]
loadHelp2 = With no arguments, restarts the debuggee using the previously
loadHelp3 = set parameters. The classname, if any, must be fully qualified.
loadHelp4 = Arguments preceding the classname are passed to the debuggee VM.
loadHelp5 = Arguments following the classname are passed to the class itself.
loadHelp6 = See also: close, kill, run

localsHelp1 = Syntax: locals [<frame-number>]
localsHelp2 = Displays a frame's visible local variables.
localsHelp3 = Defaults to the current stack frame.

lockHelp1 = Syntax: lock <object-expr>
lockHelp2 = The <object-expr> is an expression specifying an object.

macroHelp1 = Syntax: macro <macro-name>
macroHelp2 = Subsequent user input will be saved for later use by invoking
macroHelp3 = the macro name.
macroHelp4 = Enter 'endmacro' by itself to complete the macro definition.
macroHelp5 = Aliases and macros may be used in macros, but not ! or !!.

methodsHelp1 = Syntax: methods <class-name>
methodsHelp2 = List the methods of the class by the given name.

monitorHelp1 = Syntax: monitor add|del "<command>" <brk-num>
monitorHelp2 = Actions are:
monitorHelp3 = 'add' - adds a new monitor to the breakpoint.
monitorHelp4 = 'del' - removes an existing monitor from the breakpoint.
monitorHelp5 = The "command" argument must be a valid command input string,
monitorHelp6 = with a command and any required or optional command arguments.
monitorHelp7 = The breakpoint number specifies the breakpoint to which
monitorHelp8 = the monitor is added or removed.

nextHelp1 = See the help for 'step'.

nextiHelp1 = See the help for 'step'.

optionsHelp1 = Syntax: options [<option-name> <value>]
optionsHelp2 = Without arguments, 'options' will show the list of options.
optionsHelp3 = With arguments, 'options' will set an option's value.

printHelp1 = Syntax: print <expr>
printHelp2 = Evaluates <expr> and prints out the referenced value. To print
printHelp3 = out one element of an array <expr> should look like 'a[0]' to print
printHelp4 = out the first element. To print out all elements <expr> should
printHelp5 = look like 'a[]'. To print out a member called 'mem' of the 2nd
printHelp6 = element of array 'a' type 'print a[1].mem'
printHelp7 = See also: dump

readHelp1 = Syntax: read <filename>
readHelp2 = Aliases and macros may be used in scripts, but not ! or !!.

resumeHelp1 = Syntax: resume [all|<thread-id> ...]
resumeHelp2 = Resumes execution of threads (default is all).
resumeHelp3 = Resume can take several thread IDs at a time, space separated.
resumeHelp4 = See also: suspend

runHelp1 = Syntax: run [<classname> [<args>]]
runHelp2 = With no arguments, run re-executes the previously loaded class.
runHelp3 = Otherwise the given classname must be fully qualified.
runHelp4 = Arguments following the classname are passed to the class itself.
runHelp5 = See also: close, load

runtoHelp1 = runto <class id>:<line>
runtoHelp2 = - Sets breakpoint in class at specified source line and resumes.
runtoHelp3 = runto <class id>.<method>([argument_type,...])
runtoHelp4 = - Sets breakpoint in class at specified method and resumes.

setHelp1 = Syntax: set <lvalue> = <rvalue>
setHelp2 = 'lvalue' must be a variable visible in the current stack frame.
setHelp3 = 'rvalue' must either be a number, a string enclosed in double
setHelp4 = quotes, or a character enclosed in single quotes.

sourcepathHelp1 = Syntax: sourcepath [<path>]
sourcepathHelp2 = Path may contain multiple entries, separated by : or ;.
sourcepathHelp3 = The use of : or ; depends on your operating system.
sourcepathHelp4 = Without the optional path, prints the current source path.
sourcepathHelp5 = See also: classpath

stderrHelp1 = Syntax: stderr [message]
stderrHelp2 = The message is optional, and will print a blank line if not given.
stderrHelp3 = See also: stdout

stdinHelp1 = Syntax: stdin <input>
stdinHelp2 = Sends the given input to the debuggee VM's stdin stream.

stdoutHelp1 = Syntax: stdout [message]
stdoutHelp2 = The message is optional, and will print a blank line if not given.
stdoutHelp3 = See also: stderr

stepHelp1 = Syntax: step [out|up] [thread]
stepHelp2 = Steps a single line of code.
stepHelp3 = Use 'out' or 'up' to leave the current function.
stepHelp4 = Use 'thread' to suspend only the event thread.
stepHelp5 = See also: next, stepi, nexti

stepiHelp1 = See the help for 'step'.

stopHelp1 = stop
stopHelp2 = - Displays list of breakpoints.
stopHelp3 = stop [go|thread] <class id>:<line>
stopHelp4 = - Sets breakpoint in class at specified source line.
stopHelp5 = stop [go|thread] <class id>.<method>([argument_type,...])
stopHelp6 = - Sets breakpoint in class at specified method.
stopHelp7 = The 'go' and 'thread' options control which threads in the VM
stopHelp8 = are suspended when the event fires. 'go' suspends no threads,
stopHelp9 = while 'thread' causes only the event thread to stop.
stopHelp10 = See also: clear, condition, disable, enable, filter, monitor

suspendHelp1 = Syntax: suspend [all|<thread-id> ...]
suspendHelp2 = Suspends execution of threads (default is all).
suspendHelp3 = Suspend can take several thread IDs at a time, space separated.
suspendHelp4 = See also: resume

threadHelp1 = Syntax: thread [<thread-id>]
threadHelp2 = With no argument, shows currently set thread.
threadHelp3 = With argument, sets the current thread.

threadlocksHelp1 = Syntax: threadlocks [<thread-id>|all]
threadlocksHelp2 = With no argument, displays lock info for current thread.
threadlocksHelp3 = With 'all' argument, displays lock info for all threads.
threadlocksHelp4 = With id argument, displays lock info for given thread.

threadsHelp1 = Syntax: threads [<group-name>|<group-id>]
threadsHelp2 = Shows all threads in the named thread group, or all threads
threadsHelp3 = if the group name or unique ID are not given.
threadsHelp4 = The current thread is indicated with a '*'.

traceHelp1 = Syntax: trace <class>|all [<thread-id>]
traceHelp2 = Displays a message every time any method is entered or exited.
traceHelp3 = With <class> filter, only methods in the matching class(es)
traceHelp4 = are shown. The <class> argument can be wild-carded to match
traceHelp5 = more than one class, for example "java.lang.*" or "*Shape".
traceHelp6 = The 'all' keyword indicates to trace all classes. This is not
traceHelp7 = recommended as it is extremely slow.
traceHelp8 = With <thread-id> filter, only methods run in that thread are
traceHelp9 = shown. The <thread-id> can be a thread number or a thread name.
traceHelp10 = The default is to include all threads.
traceHelp11 = See also: clear

unaliasHelp1 = Syntax: unalias <name>
unaliasHelp2 = Removes the command alias by the given name.
unaliasHelp3 = See also: alias

upHelp1 = Syntax: up [<n-frames>]
upHelp2 = See also: down, frame

viewHelp1 = Syntax: view <file>|<class> [first-line] [last-line]
viewHelp2 = First tries to find <class> using the classpath and sourcepath.
viewHelp3 = If class is not found, tries to find file using absolute path.
viewHelp4 = Optional line arguments show the given range of lines.

whereHelp1 = Syntax: where [<thread-id>|all]
whereHelp2 = Displays the stack frame of a thread.
whereHelp3 = See also: wherei

whereiHelp1 = Syntax: wherei [<thread-id>|all]
whereiHelp2 = Displays the stack frame of a thread with pc info.
whereiHelp3 = See also: where


######################################################################
#                       Command messages
######################################################################

alias.defined = Alias successfully defined:
alias.undefined = Alias not found:

apropos.errorCommandList = Internal error: 'commands' list missing
apropos.notfound = No matching commands found.

attach.attachingTo = Attaching to debuggee at
attach.failed = Attach to debuggee failed.
attach.missingPort = Remote port number is undefined.
attach.missingShare = Remote share name is undefined.

brkinfo.badbrk = Invalid breakpoint number format.
brkinfo.brkgrp = Breakpoint group:
brkinfo.classFilters = Class filters:
brkinfo.conditions = Conditions:
brkinfo.disabled = Breakpoint is disabled.
brkinfo.enabled = Breakpoint is enabled.
brkinfo.expired = Breakpoint has expired.
brkinfo.expires = Breakpoint expires after this many hits:
brkinfo.monitors = Monitors:
brkinfo.nobrk = No such breakpoint number.
brkinfo.resolved = Breakpoint has been resolved.
brkinfo.skipping = Breakpoint is skipping.
brkinfo.skips = Breakpoint skips this many hits:
brkinfo.threadFilters = Thread filters:
brkinfo.unresolved = Breakpoint is not resolved.

catch.added = Catch added.

classes.noneLoaded = No classes loaded.

classpath.active = Cannot set classpath while actively debugging.
classpath.nopath = No classpath has been defined.
classpath.path = Class path:
classpath.set = Class path set.

# Shown when clear command deletes a set of breakpoints.
clear.breakpointsDeleted = Breakpoint(s) deleted.

condition.added = Condition added.
condition.badaction = Unknown condition action.
condition.badbrk = Invalid breakpoint number format.
condition.badexpr = Poorly formatted conditional expression.
condition.nobrk = No such breakpoint number.
condition.nocond = No such condition found.
condition.removed = Condition removed.

# Shown when enable/disable command enables/disables a set of breakpoints.
enable.breakpointsDisabled = Breakpoint(s) disabled.
enable.breakpointsEnabled = Breakpoint(s) enabled.

exclude.added = added to exclusion list.
exclude.list = Excluded classes:
exclude.none = No classes excluded.
exclude.notfound = not in exclusion filter set.
exclude.removed = removed from exclusion list.

filter.added = Filter added.
filter.badaction = Unknown filter action.
filter.badbrk = Invalid breakpoint number format.
filter.badtype = Invalid filter type.
filter.nobrk = No such breakpoint number.
filter.nofilter = No such filter found.
filter.removed = Filter removed.

help.atTopAlready = Cannot go any higher than 'top'.
help.doneInteractive = Exiting help.
help.helpFor = Help for
help.invalidCategory = Invalid category selection.
help.isaAlias = is an alias.
help.isaMacro = is a macro.
help.separator = ============================================================
help.unknownCommand = Unknown command, alias, macro, or help category.

invoke.ambiguousClass = Ambiguous class specification.
invoke.ambiguousMethod = Ambiguous method specification.
invoke.badThreadState = Current thread not suspended.
invoke.badVarOrClass = Unknown variable reference or class name.
invoke.malformedArgument = Malformed argument.
invoke.malformedArguments = Malformed argument list.
invoke.malformedMethod = Malformed method specification. See 'help invoke'.
invoke.noSuchMethod = No such method.
invoke.notaClass = Specified class is an array or interface.
invoke.unknownArgument = Argument not understood.
invoke.unknownLocation = Current location not set. Specify class name.

list.invalidCount = Invalid count number format.
list.missingCount = Missing count value.
list.noLocation = No current stepping location set.
list.noShowFile = UI adapter cannot show file contents.

listen.disconnecting = listen: Session already active! Disconnecting from remote VM...
listen.noConnectorFound = No connector found for given transport type.

load.missingClass = The load/run command requires a class name.

locals.noneFound = No visible variables.

lock.monitorInfoFor = Monitor information for
lock.notOwned = Not owned
lock.ownedBy = Owned by:
lock.entryCount = entry count:
lock.noWaiters = No waiters
lock.uoe = Operation not support in HotSpot VM.
lock.waitingThread = Waiting thread:

macro.complete = Macro definition completed.
macro.deleted = Macro definition deleted.
macro.invokesSelf = ERROR: Macros cannot invoke themselves.
macro.starting1 = Start entering the macro definition.
macro.starting2 = Enter 'endmacro' by itself to complete macro definition.

monitor.added = Monitor added.
monitor.badaction = Unknown monitor action.
monitor.badbrk = Invalid breakpoint number format.
monitor.nobrk = No such breakpoint number.
monitor.nomon = No such monitor found.
monitor.removed = Monitor removed.

options.failedSave = Failed to save preferences to disk.
options.listOfOptions = List of available options.
options.set = Option value set.
options.unknownOption = Option by that name is not available.

print.arrayBounds = Array index out of bounds.

run.tryLoadInstead = Try using the 'load' command instead.

set.badFormat = Improperly formatted expression:
set.invalidNumber = Invalid number.
set.invalidType = Invalid type on right-hand side of assignment:

sourcepath.nopath = No sourcepath has been defined.
sourcepath.path = Source path:
sourcepath.set = Source path set:

stdin.remoteDebuggee = The debuggee is remote and input cannot be sent to it.

stop.breakpointAdded = Breakpoint added.

# Shown at the top of the breakpoint list.
stop.breakpointList = Breakpoints:
stop.noBreakpointsDefined = No breakpoints defined.

# Breakpoint status shown in the breakpoint list.
stop.disabledInBrackets = [disabled]
stop.enabledInBrackets = [enabled]
stop.expiredInBrackets = [expired]
stop.skippingInBrackets = [skipping]
stop.unresolvedInBrackets = [unresolved]

threadlocks.uoe = Operation not support in HotSpot VM.

trace.traceAdded = Trace added.

unalias.removed = Alias deleted.
unalias.undefined = Alias not found:

view.invalidLine = Invalid line number:
view.noShowFile = UI adapter cannot show file contents.

vmlist.listOfVMs = List of running virtual machines...
