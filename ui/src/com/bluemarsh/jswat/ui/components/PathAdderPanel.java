/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is JSwat. The Initial Developer of the Original
 * Software is Nathan L. Fiedler. Portions created by Nathan L. Fiedler
 * are Copyright (C) 2005-2007. All Rights Reserved.
 *
 * Contributor(s): Nathan L. Fiedler.
 *
 * $Id$
 */

package com.bluemarsh.jswat.ui.components;

import com.bluemarsh.jswat.ui.actions.Actions;
import com.bluemarsh.jswat.ui.actions.ClearAction;
import com.bluemarsh.jswat.ui.actions.CopyAction;
import com.bluemarsh.jswat.ui.actions.CutAction;
import com.bluemarsh.jswat.ui.actions.PasteAction;
import com.bluemarsh.jswat.core.util.Strings;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.List;
import javax.swing.Action;
import javax.swing.JPanel;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.util.NbBundle;

/**
 * Panel for adding multiple path entries simultaneously (i.e. bulk add).
 *
 * @author  Nathan Fiedler
 */
public class PathAdderPanel extends JPanel {
    /** silence the compiler warnings */
    private static final long serialVersionUID = 1L;

    /**
     * Creates new form PathAdderPanel.
     */
    public PathAdderPanel() {
        initComponents();
        pasteButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                inputTextArea.paste();
            }
        });
        Action[] actions = new Action[] {
            new CutAction(),
            new CopyAction(),
            new PasteAction(),
            new ClearAction(),
        };
        Actions.attachActions(actions, inputTextArea);
        Actions.attachShortcuts(actions, this);
    }

    @Override
    public void addNotify() {
        super.addNotify();
        inputTextArea.requestFocusInWindow();
    }

    /**
     * Build and display a dialog for editing the session properties.
     *
     * @return  true if user accepts their input, false otherwise.
     */
    public boolean display() {
        String title = NbBundle.getMessage(getClass(), "LBL_Paths_BulkTitle");
        DialogDescriptor desc = new DialogDescriptor(this, title);
        Object value = DialogDisplayer.getDefault().notify(desc);
        return value == DialogDescriptor.OK_OPTION;
    }

    /**
     * Retrieve the multiple path entries the user has provided.
     *
     * @return  multiple paths, or null if none.
     */
    public List<String> getPaths() {
        List<String> paths = null;
        String text = inputTextArea.getText();
        if (text != null && text.length() > 0) {
            paths = Strings.stringToList(text, File.pathSeparator);
        }
        return paths;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        describeTextArea = new javax.swing.JTextArea();
        textAreaScrollPane = new javax.swing.JScrollPane();
        inputTextArea = new javax.swing.JTextArea();
        pasteButton = new javax.swing.JButton();

        describeTextArea.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        describeTextArea.setColumns(30);
        describeTextArea.setEditable(false);
        describeTextArea.setLineWrap(true);
        describeTextArea.setRows(2);
        describeTextArea.setText(java.util.ResourceBundle.getBundle("com/bluemarsh/jswat/ui/components/Forms").getString("LBL_Paths_BulkDescription"));
        describeTextArea.setWrapStyleWord(true);
        describeTextArea.setFocusable(false);

        inputTextArea.setColumns(30);
        inputTextArea.setLineWrap(true);
        inputTextArea.setRows(10);
        textAreaScrollPane.setViewportView(inputTextArea);

        pasteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bluemarsh/jswat/ui/resources/paste.gif")));
        pasteButton.setToolTipText(java.util.ResourceBundle.getBundle("com/bluemarsh/jswat/ui/components/Forms").getString("TIP_Paths_Paste"));
        pasteButton.setMargin(new java.awt.Insets(2, 2, 2, 2));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textAreaScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(describeTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pasteButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(describeTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pasteButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textAreaScrollPane)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea describeTextArea;
    private javax.swing.JTextArea inputTextArea;
    private javax.swing.JButton pasteButton;
    private javax.swing.JScrollPane textAreaScrollPane;
    // End of variables declaration//GEN-END:variables
}
