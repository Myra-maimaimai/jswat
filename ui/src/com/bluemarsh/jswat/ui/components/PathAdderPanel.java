/*
 *                     Sun Public License Notice.
 *
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"); you may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 *
 * The Original Code is the JSwat UI module. The Initial Developer of the
 * Original Code is Nathan L. Fiedler. Portions created by Nathan L. Fiedler
 * are Copyright (C) 2005-2006. All Rights Reserved.
 *
 * Contributor(s): Nathan L. Fiedler.
 *
 * $Id: PathAdderPanel.java 15 2007-06-03 00:01:17Z nfiedler $
 */

package com.bluemarsh.jswat.ui.components;

import com.bluemarsh.jswat.core.actions.Actions;
import com.bluemarsh.jswat.core.actions.ClearAction;
import com.bluemarsh.jswat.core.actions.CopyAction;
import com.bluemarsh.jswat.core.actions.CutAction;
import com.bluemarsh.jswat.core.actions.PasteAction;
import com.bluemarsh.jswat.core.util.Strings;
import java.awt.Dialog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.List;
import javax.swing.Action;
import javax.swing.JPanel;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;

/**
 * Panel for adding multiple path entries simultaneously (i.e. bulk add).
 *
 * @author  Nathan Fiedler
 */
public class PathAdderPanel extends JPanel implements ActionListener {
    /** silence the compiler warnings */
    private static final long serialVersionUID = 1L;
    /** Dialog for displaying this panel. */
    private Dialog inputDialog;
    /** True if the user has provided valid input and is ready,
     * false otherwise. */
    private boolean okayToGo;

    /**
     * Creates new form PathAdderPanel.
     */
    public PathAdderPanel() {
        initComponents();
        pasteButton.addActionListener(this);
        Action[] actions = new Action[] {
            new CutAction(),
            new CopyAction(),
            new PasteAction(),
            new ClearAction(),
        };
        Actions.attachActions(actions, inputTextArea);
        Actions.attachShortcuts(actions, this);
    }

    /**
     * Invoked by the press of a button.
     *
     * @param  event  action event.
     */
    public void actionPerformed(ActionEvent event) {
        String cmd = event.getActionCommand();
        Object src = event.getSource();
        if (cmd.equals("OK")) {
            okayToGo = true;
            inputDialog.dispose();
        } else if (src == pasteButton) {
            inputTextArea.paste();
        } else {
            inputDialog.dispose();
        }
    }

    /**
     * Build and display a dialog for editing the session properties.
     *
     * @return  true if user input is valid and ready to go, false otherwise.
     */
    public boolean display() {
        // Collect the dialog elements.
        String title = NbBundle.getMessage(getClass(), "LBL_Paths_BulkTitle");
        // Display dialog and get the user response.
        DialogDescriptor dd = new DialogDescriptor(
                this, title, true, DialogDescriptor.OK_CANCEL_OPTION,
                DialogDescriptor.OK_OPTION, DialogDescriptor.BOTTOM_ALIGN,
                HelpCtx.DEFAULT_HELP, this);
        dd.setClosingOptions(new Object[] { DialogDescriptor.CANCEL_OPTION });
        inputDialog = DialogDisplayer.getDefault().createDialog(dd);
        okayToGo = false;
        inputDialog.setVisible(true);
        // (blocks until dialog is disposed...)
        return okayToGo;
    }

    /**
     * Retrieve the multiple path entries the user has provided.
     *
     * @return  multiple paths, or null if none.
     */
    public List<String> getPaths() {
        List<String> paths = null;
        String text = inputTextArea.getText();
        if (text != null && text.length() > 0) {
            paths = Strings.stringToList(text, File.pathSeparator);
        }
        return paths;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        describeTextArea = new javax.swing.JTextArea();
        textAreaScrollPane = new javax.swing.JScrollPane();
        inputTextArea = new javax.swing.JTextArea();
        pasteButton = new javax.swing.JButton();

        describeTextArea.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        describeTextArea.setColumns(30);
        describeTextArea.setEditable(false);
        describeTextArea.setLineWrap(true);
        describeTextArea.setRows(2);
        describeTextArea.setText(java.util.ResourceBundle.getBundle("com/bluemarsh/jswat/ui/components/Forms").getString("LBL_Paths_BulkDescription"));
        describeTextArea.setWrapStyleWord(true);
        describeTextArea.setFocusable(false);

        inputTextArea.setColumns(30);
        inputTextArea.setLineWrap(true);
        inputTextArea.setRows(10);
        textAreaScrollPane.setViewportView(inputTextArea);

        pasteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bluemarsh/jswat/ui/resources/paste.gif")));
        pasteButton.setToolTipText(java.util.ResourceBundle.getBundle("com/bluemarsh/jswat/ui/components/Forms").getString("TIP_Paths_Paste"));
        pasteButton.setMargin(new java.awt.Insets(2, 2, 2, 2));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(textAreaScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(layout.createSequentialGroup()
                        .add(describeTextArea, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(pasteButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(describeTextArea, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(pasteButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(textAreaScrollPane)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea describeTextArea;
    private javax.swing.JTextArea inputTextArea;
    private javax.swing.JButton pasteButton;
    private javax.swing.JScrollPane textAreaScrollPane;
    // End of variables declaration//GEN-END:variables
    
}
