/*
 *                     Sun Public License Notice.
 *
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"); you may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 *
 * The Original Code is the JSwat UI module. The Initial Developer of the
 * Original Code is Nathan L. Fiedler. Portions created by Nathan L. Fiedler
 * are Copyright (C) 2005-2006. All Rights Reserved.
 *
 * Contributor(s): Nathan L. Fiedler.
 *
 * $Id: FindPanel.java 15 2007-06-03 00:01:17Z nfiedler $
 */

package com.bluemarsh.jswat.ui.components;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.JPanel;
import javax.swing.UIManager;

/**
 * Supplies a generic interface for finding things.
 *
 * @author  Nathan Fiedler
 */
public class FindPanel extends JPanel implements ActionListener, KeyListener {
    /** silence the compiler warnings */
    private static final long serialVersionUID = 1L;
    /** Color for highlighting the text field. */
    private static final Color HIGHLIGHT_COLOR = new Color(240, 100, 100);
    /** The search driver. */
    private Findable findable;

    /**
     * Creates new form FindPanel.
     *
     * @param  findable  the object that does the searching.
     */
    public FindPanel(Findable findable) {
        this.findable = findable;
        initComponents();
        closeButton.addActionListener(this);
        nextButton.addActionListener(this);
        prevButton.addActionListener(this);
        findTextField.addActionListener(this);
        findTextField.addKeyListener(this);
    }

    public void actionPerformed(ActionEvent e) {
        Object src = e.getSource();
        if (src == closeButton) {
            findable.dismiss();
        } else if (src == nextButton || src == findTextField) {
            String query = findTextField.getText();
            boolean found;
            if (query.length() > 0) {
                found = findable.findNext(query);
            } else {
                found = false;
            }
            highlightField(found);
        } else if (src == prevButton) {
            String query = findTextField.getText();
            boolean found;
            if (query.length() > 0) {
                found = findable.findPrevious(query);
            } else {
                found = false;
            }
            highlightField(found);
        }
    }

    public void addNotify() {
        super.addNotify();
        findTextField.requestFocusInWindow();
    }

    /**
     * Set the background color of the text field according to whether the
     * search query was found or not.
     *
     * @param  found  true if query found, false otherwise.
     */
    private void highlightField(boolean found) {
        Color bg;
        Color fg;
        if (found) {
            bg = UIManager.getColor("TextField.background");
            fg = UIManager.getColor("TextField.foreground");
        } else {
            bg = HIGHLIGHT_COLOR;
            fg = UIManager.getColor("TextField.highlight");
        }
        findTextField.setBackground(bg);
        findTextField.setForeground(fg);
    }

    public void keyPressed(KeyEvent e) {
         int keyCode = e.getKeyCode();
         if (keyCode == KeyEvent.VK_ESCAPE) {
             findable.dismiss();
         }
    }

    public void keyReleased(KeyEvent e) {
    }

    public void keyTyped(KeyEvent e) {
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        closeButton = new javax.swing.JButton();
        findLabel = new javax.swing.JLabel();
        findTextField = new javax.swing.JTextField();
        nextButton = new javax.swing.JButton();
        prevButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        closeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bluemarsh/jswat/ui/resources/find_close.gif")));
        closeButton.setMnemonic(java.util.ResourceBundle.getBundle("com/bluemarsh/jswat/ui/components/Forms").getString("KEY_Find_Close").charAt(0));
        closeButton.setToolTipText(java.util.ResourceBundle.getBundle("com/bluemarsh/jswat/ui/components/Forms").getString("HINT_Find_Close"));
        closeButton.setBorderPainted(false);
        closeButton.setContentAreaFilled(false);
        closeButton.setFocusPainted(false);
        closeButton.setFocusable(false);
        closeButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        add(closeButton, new java.awt.GridBagConstraints());

        findLabel.setDisplayedMnemonic(java.util.ResourceBundle.getBundle("com/bluemarsh/jswat/ui/components/Forms").getString("KEY_Find_Find").charAt(0));
        findLabel.setText(java.util.ResourceBundle.getBundle("com/bluemarsh/jswat/ui/components/Forms").getString("LBL_Find_Find"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 3);
        add(findLabel, gridBagConstraints);

        findTextField.setColumns(10);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(findTextField, gridBagConstraints);

        nextButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bluemarsh/jswat/ui/resources/find_next.gif")));
        nextButton.setMnemonic(java.util.ResourceBundle.getBundle("com/bluemarsh/jswat/ui/components/Forms").getString("KEY_Find_Next").charAt(0));
        nextButton.setToolTipText(java.util.ResourceBundle.getBundle("com/bluemarsh/jswat/ui/components/Forms").getString("HINT_Find_Next"));
        nextButton.setBorderPainted(false);
        nextButton.setContentAreaFilled(false);
        nextButton.setFocusPainted(false);
        nextButton.setFocusable(false);
        nextButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        add(nextButton, new java.awt.GridBagConstraints());

        prevButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bluemarsh/jswat/ui/resources/find_previous.gif")));
        prevButton.setMnemonic(java.util.ResourceBundle.getBundle("com/bluemarsh/jswat/ui/components/Forms").getString("KEY_Find_Previous").charAt(0));
        prevButton.setToolTipText(java.util.ResourceBundle.getBundle("com/bluemarsh/jswat/ui/components/Forms").getString("HINT_Find_Previous"));
        prevButton.setBorderPainted(false);
        prevButton.setContentAreaFilled(false);
        prevButton.setFocusPainted(false);
        prevButton.setFocusable(false);
        prevButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        add(prevButton, new java.awt.GridBagConstraints());

    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel findLabel;
    private javax.swing.JTextField findTextField;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton prevButton;
    // End of variables declaration//GEN-END:variables
}
