/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is JSwat. The Initial Developer of the Original
 * Software is Nathan L. Fiedler. Portions created by Nathan L. Fiedler
 * are Copyright (C) 2005-2006. All Rights Reserved.
 *
 * Contributor(s): Nathan L. Fiedler.
 *
 * $Id: LinePanel.java 6 2007-05-16 07:14:24Z nfiedler $
 */

package com.bluemarsh.jswat.ui.breakpoint;

import com.bluemarsh.jswat.core.breakpoint.Breakpoint;
import com.bluemarsh.jswat.core.breakpoint.BreakpointFactory;
import com.bluemarsh.jswat.core.breakpoint.LineBreakpoint;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import org.openide.ErrorManager;
import org.openide.util.NbBundle;

/**
 * Class LinePanel is the specific editor for a LineBreakpoint.
 *
 * @author  Nathan Fiedler
 */
public class LinePanel extends AbstractAdapter implements FocusListener {
    /** silence the compiler warnings */
    private static final long serialVersionUID = 1L;
    /** Breakpoint to update. */
    private Breakpoint breakpoint;

    /**
     * Creates new form LinePanel.
     */
    public LinePanel() {
        initComponents();
    }

    /**
     * Indicates if this adapter is the sort that can construct a new
     * Breakpoint instance from the user-provided information.
     *
     * @return  true if breakpoint creation is possible, false otherwise.
     */
    public boolean canCreateBreakpoint() {
        // Line breakpoints can only be created via the editor.
        return false;
    }

    /**
     * Create a Breakpoint instance that encapsulates the information
     * provided by the user. This may not be entirely complete since
     * some of the information is contained in other adapters. The caller
     * is responsible for invoking <code>saveParameters(Breakpoint)</code>
     * on the other adapters to make the Breakpoint instance complete.
     *
     * @param  factory  breakpoint factory to construct breakpoint.
     * @return  new Breakpoint, or null if creation not supported.
     */
    public Breakpoint createBreakpoint(BreakpointFactory factory) {
        return null;
    }

    public void focusGained(FocusEvent e) {
    }

    public void focusLost(FocusEvent e) {
        String msg = validateInput();
        fireInputPropertyChange(msg);
        if (msg == null) {
            saveParameters(breakpoint);
        }
    }

    /**
     * Read the values from the given Breakpoint to populate the fields
     * of this editor.
     * 
     * @param  bp  Breakpoint to edit.
     */
    public void loadParameters(Breakpoint bp) {
        LineBreakpoint lb = (LineBreakpoint) bp;
        fileTextField.setText(lb.getURL());
        lineTextField.setText(String.valueOf(lb.getLineNumber()));

        // Listen to the components after they are initialized.
        if (breakpoint == null) {
            lineTextField.addFocusListener(this);
        }
        breakpoint = bp;
    }

    /**
     * Saves the values from the fields of this editor to the given Breakpoint.
     * 
     * @param  bp  Breakpoint to modify.
     */
    public void saveParameters(Breakpoint bp) {
        LineBreakpoint lb = (LineBreakpoint) bp;
        String l = lineTextField.getText();
        try {
            Integer i = Integer.parseInt(l);
            lb.setLineNumber(i);
        } catch (NumberFormatException nfe) {
            // Input should have already been validated.
            ErrorManager.getDefault().notify(nfe);
        }
    }

    /**
     * Validate the user-provided input.
     * 
     * @return  error message if input invalid, null if valid.
     */
    public String validateInput() {
        String l = lineTextField.getText();
        try {
            Integer.parseInt(l);
            return null;
        } catch (NumberFormatException nfe) {
            return NbBundle.getMessage(getClass(), "ERR_Line_Invalid_Number");
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        fileLabel = new javax.swing.JLabel();
        fileTextField = new javax.swing.JTextField();
        lineLabel = new javax.swing.JLabel();
        lineTextField = new javax.swing.JTextField();

        setLayout(new java.awt.GridBagLayout());

        setBorder(javax.swing.BorderFactory.createTitledBorder(java.util.ResourceBundle.getBundle("com/bluemarsh/jswat/ui/breakpoint/Form").getString("LBL_Location_Border_Title")));
        fileLabel.setLabelFor(fileTextField);
        fileLabel.setText(java.util.ResourceBundle.getBundle("com/bluemarsh/jswat/ui/breakpoint/Form").getString("LBL_Line_File"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 12);
        add(fileLabel, gridBagConstraints);

        fileTextField.setColumns(30);
        fileTextField.setEditable(false);
        fileTextField.setToolTipText(java.util.ResourceBundle.getBundle("com/bluemarsh/jswat/ui/breakpoint/Form").getString("HINT_Line_File"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        add(fileTextField, gridBagConstraints);

        lineLabel.setLabelFor(lineTextField);
        lineLabel.setText(java.util.ResourceBundle.getBundle("com/bluemarsh/jswat/ui/breakpoint/Form").getString("LBL_Line_Line"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 12);
        add(lineLabel, gridBagConstraints);

        lineTextField.setToolTipText(java.util.ResourceBundle.getBundle("com/bluemarsh/jswat/ui/breakpoint/Form").getString("HINT_Line_Line"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        add(lineTextField, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel fileLabel;
    private javax.swing.JTextField fileTextField;
    private javax.swing.JLabel lineLabel;
    private javax.swing.JTextField lineTextField;
    // End of variables declaration//GEN-END:variables
}
