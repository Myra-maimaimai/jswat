/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is JSwat. The Initial Developer of the Original
 * Software is Nathan L. Fiedler. Portions created by Nathan L. Fiedler
 * are Copyright (C) 2009-2010. All Rights Reserved.
 *
 * Contributor(s): Nathan L. Fiedler.
 *
 * $Id$
 */
package com.bluemarsh.jswat.ui;

import com.bluemarsh.jswat.core.CoreSettings;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 * Debugger options panel.
 *
 * @author Nathan Fiedler
 */
final class DebugPanel extends JPanel implements ActionListener,
        ChangeListener, ItemListener, KeyListener {

    /** silence compiler warnings */
    private static final long serialVersionUID = 1L;
    /** Options panel controller. */
    private final DebugOptionsPanelController controller;

    /**
     * Constructs a DebugPanel.
     *
     * @param  controller  debug panel controller.
     */
    DebugPanel(DebugOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        excludesAddButton.addActionListener(this);
        excludesRemoveButton.addActionListener(this);
        connectTimeoutSpinner.addChangeListener(this);
        methodTimeoutSpinner.addChangeListener(this);
        hiddenFilesCheckBox.addItemListener(this);
        showThreadsCheckBox.addItemListener(this);
        skipSynsCheckBox.addItemListener(this);
        sourceExtField.addKeyListener(this);
    }

    @Override
    public void actionPerformed(ActionEvent event) {
        Object src = event.getSource();
        if (src == excludesAddButton) {
            String excl = excludesTextField.getText();
            if (excl.length() > 0) {
                DefaultListModel model = (DefaultListModel) excludesList.getModel();
                model.addElement(excl);
                excludesTextField.setText("");
                controller.changed();
            }
        } else if (src == excludesRemoveButton) {
            DefaultListModel model = (DefaultListModel) excludesList.getModel();
            int[] selections = excludesList.getSelectedIndices();
            if (selections.length > 0) {
                for (int ii = selections.length - 1; ii >= 0; ii--) {
                    model.remove(selections[ii]);
                }
                controller.changed();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        // Something changed state, notify the controller.
        controller.changed();
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        // Something changed state, notify the controller.
        controller.changed();
    }

    @Override
    public void keyTyped(KeyEvent e) {
        // A text field's contents probably changed.
        controller.changed();
    }

    @Override
    public void keyPressed(KeyEvent e) {
        // ignored
    }

    @Override
    public void keyReleased(KeyEvent e) {
        // ignored
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        methodTimeoutLabel = new javax.swing.JLabel();
        methodTimeoutSpinner = new javax.swing.JSpinner();
        connectTimeoutLabel = new javax.swing.JLabel();
        connectTimeoutSpinner = new javax.swing.JSpinner();
        excludesPanel = new javax.swing.JPanel();
        excludesAddLabel = new javax.swing.JLabel();
        excludesTextField = new javax.swing.JTextField();
        excludesAddButton = new javax.swing.JButton();
        excludesScrollPane = new javax.swing.JScrollPane();
        excludesList = new javax.swing.JList();
        excludesRemoveButton = new javax.swing.JButton();
        showThreadsCheckBox = new javax.swing.JCheckBox();
        hiddenFilesCheckBox = new javax.swing.JCheckBox();
        skipSynsCheckBox = new javax.swing.JCheckBox();
        sourceExtLabel = new javax.swing.JLabel();
        sourceExtField = new javax.swing.JTextField();

        methodTimeoutLabel.setDisplayedMnemonic(java.util.ResourceBundle.getBundle("com/bluemarsh/jswat/ui/Bundle").getString("DebugPanel.methodTimeout.key").charAt(0));
        methodTimeoutLabel.setLabelFor(methodTimeoutSpinner);
        org.openide.awt.Mnemonics.setLocalizedText(methodTimeoutLabel, org.openide.util.NbBundle.getMessage(DebugPanel.class, "DebugPanel.methodTimeout.text")); // NOI18N

        methodTimeoutSpinner.setModel(new javax.swing.SpinnerNumberModel(5000, 0, 60000, 100));
        methodTimeoutSpinner.setToolTipText(org.openide.util.NbBundle.getMessage(DebugPanel.class, "DebugPanel.methodTimeout.hint")); // NOI18N

        connectTimeoutLabel.setDisplayedMnemonic(java.util.ResourceBundle.getBundle("com/bluemarsh/jswat/ui/Bundle").getString("DebugPanel.connectionTimeout.key").charAt(0));
        connectTimeoutLabel.setLabelFor(connectTimeoutSpinner);
        org.openide.awt.Mnemonics.setLocalizedText(connectTimeoutLabel, org.openide.util.NbBundle.getMessage(DebugPanel.class, "DebugPanel.connectionTimeout.text")); // NOI18N

        connectTimeoutSpinner.setModel(new javax.swing.SpinnerNumberModel(5000, 0, 60000, 100));
        connectTimeoutSpinner.setToolTipText(org.openide.util.NbBundle.getMessage(DebugPanel.class, "DebugPanel.connectionTimeout.hint")); // NOI18N

        excludesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(DebugPanel.class, "DebugPanel.excludesPanel.text"))); // NOI18N

        excludesAddLabel.setDisplayedMnemonic(java.util.ResourceBundle.getBundle("com/bluemarsh/jswat/ui/Bundle").getString("DebugPanel.excludesAddLabel.key").charAt(0));
        excludesAddLabel.setLabelFor(excludesTextField);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/bluemarsh/jswat/ui/Bundle"); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(excludesAddLabel, bundle.getString("DebugPanel.excludesAddLabel.text")); // NOI18N

        excludesTextField.setColumns(10);
        excludesTextField.setToolTipText(bundle.getString("DebugPanel.excludesAddField.hint")); // NOI18N

        excludesAddButton.setMnemonic(java.util.ResourceBundle.getBundle("com/bluemarsh/jswat/ui/Bundle").getString("DebugPanel.excludesAddButton.key").charAt(0));
        org.openide.awt.Mnemonics.setLocalizedText(excludesAddButton, bundle.getString("DebugPanel.excludesAddButton.text")); // NOI18N

        excludesList.setModel(new DefaultListModel());
        excludesList.setToolTipText(org.openide.util.NbBundle.getMessage(DebugPanel.class, "DebugPanel.excludesList.hint")); // NOI18N
        excludesScrollPane.setViewportView(excludesList);

        excludesRemoveButton.setMnemonic(java.util.ResourceBundle.getBundle("com/bluemarsh/jswat/ui/Bundle").getString("DebugPanel.excludesRemoveButton.key").charAt(0));
        org.openide.awt.Mnemonics.setLocalizedText(excludesRemoveButton, bundle.getString("DebugPanel.excludesRemoveButton.text")); // NOI18N

        javax.swing.GroupLayout excludesPanelLayout = new javax.swing.GroupLayout(excludesPanel);
        excludesPanel.setLayout(excludesPanelLayout);
        excludesPanelLayout.setHorizontalGroup(
            excludesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 532, Short.MAX_VALUE)
            .addGroup(excludesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(excludesPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(excludesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(excludesPanelLayout.createSequentialGroup()
                            .addComponent(excludesAddLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(excludesTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE))
                        .addComponent(excludesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(excludesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(excludesAddButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(excludesRemoveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap()))
        );
        excludesPanelLayout.setVerticalGroup(
            excludesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 270, Short.MAX_VALUE)
            .addGroup(excludesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(excludesPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(excludesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(excludesAddLabel)
                        .addComponent(excludesAddButton)
                        .addComponent(excludesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(excludesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(excludesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                        .addComponent(excludesRemoveButton))
                    .addContainerGap()))
        );

        showThreadsCheckBox.setMnemonic(java.util.ResourceBundle.getBundle("com/bluemarsh/jswat/ui/Bundle").getString("DebugPanel.showAllThreads.key").charAt(0));
        org.openide.awt.Mnemonics.setLocalizedText(showThreadsCheckBox, org.openide.util.NbBundle.getMessage(DebugPanel.class, "DebugPanel.showAllThreads.text")); // NOI18N
        showThreadsCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(DebugPanel.class, "DebugPanel.showAllThreads.hint")); // NOI18N

        hiddenFilesCheckBox.setMnemonic(java.util.ResourceBundle.getBundle("com/bluemarsh/jswat/ui/Bundle").getString("DebugPanel.showHiddenFiles.key").charAt(0));
        org.openide.awt.Mnemonics.setLocalizedText(hiddenFilesCheckBox, org.openide.util.NbBundle.getMessage(DebugPanel.class, "DebugPanel.showHiddenFiles.text")); // NOI18N
        hiddenFilesCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(DebugPanel.class, "DebugPanel.showHiddenFiles.hint")); // NOI18N

        skipSynsCheckBox.setMnemonic(java.util.ResourceBundle.getBundle("com/bluemarsh/jswat/ui/Bundle").getString("DebugPanel.skipSynthetics.key").charAt(0));
        org.openide.awt.Mnemonics.setLocalizedText(skipSynsCheckBox, org.openide.util.NbBundle.getMessage(DebugPanel.class, "DebugPanel.skipSynthetics.text")); // NOI18N
        skipSynsCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(DebugPanel.class, "DebugPanel.skipSynthetics.hint")); // NOI18N

        sourceExtLabel.setDisplayedMnemonic(java.util.ResourceBundle.getBundle("com/bluemarsh/jswat/ui/Bundle").getString("DebugPanel.sourceExtension.key").charAt(0));
        org.openide.awt.Mnemonics.setLocalizedText(sourceExtLabel, org.openide.util.NbBundle.getMessage(DebugPanel.class, "DebugPanel.sourceExtension.text")); // NOI18N

        sourceExtField.setColumns(10);
        sourceExtField.setToolTipText(org.openide.util.NbBundle.getMessage(DebugPanel.class, "DebugPanel.sourceExtension.hint")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(methodTimeoutLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(methodTimeoutSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(connectTimeoutLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(connectTimeoutSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(showThreadsCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(hiddenFilesCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, Short.MAX_VALUE)
                                .addComponent(skipSynsCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(sourceExtLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sourceExtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(48, 48, 48))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(excludesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(methodTimeoutLabel)
                    .addComponent(methodTimeoutSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectTimeoutLabel)
                    .addComponent(connectTimeoutSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(showThreadsCheckBox)
                    .addComponent(hiddenFilesCheckBox)
                    .addComponent(skipSynsCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sourceExtLabel)
                    .addComponent(sourceExtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(excludesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    void load() {
        CoreSettings settings = CoreSettings.getDefault();
        showThreadsCheckBox.setSelected(settings.getShowAllThreads());
        hiddenFilesCheckBox.setSelected(settings.getShowHiddenFiles());
        skipSynsCheckBox.setSelected(settings.getSkipSynthetics());
        sourceExtField.setText(settings.getSourceExtension());
        connectTimeoutSpinner.setValue(settings.getConnectionTimeout());
        methodTimeoutSpinner.setValue(settings.getInvocationTimeout());
        List<String> excludes = settings.getSteppingExcludes();
        DefaultListModel model = (DefaultListModel) excludesList.getModel();
        model.clear();
        Iterator<String> iter = excludes.iterator();
        while (iter.hasNext()) {
            model.addElement(iter.next());
        }
    }

    void store() {
        CoreSettings settings = CoreSettings.getDefault();
        settings.setShowAllThreads(showThreadsCheckBox.isSelected());
        settings.setShowHiddenFiles(hiddenFilesCheckBox.isSelected());
        settings.setSkipSynthetics(skipSynsCheckBox.isSelected());
        settings.setSourceExtension(sourceExtField.getText());
        settings.setConnectionTimeout((Integer) connectTimeoutSpinner.getValue());
        settings.setInvocationTimeout((Integer) methodTimeoutSpinner.getValue());
        DefaultListModel model = (DefaultListModel) excludesList.getModel();
        Enumeration<?> enmr = model.elements();
        List<String> list = new ArrayList<String>(model.getSize());
        while (enmr.hasMoreElements()) {
            list.add((String) enmr.nextElement());
        }
        settings.setSteppingExcludes(list);
    }

    boolean valid() {
        // This form is always consistent and complete.
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel connectTimeoutLabel;
    private javax.swing.JSpinner connectTimeoutSpinner;
    private javax.swing.JButton excludesAddButton;
    private javax.swing.JLabel excludesAddLabel;
    private javax.swing.JList excludesList;
    private javax.swing.JPanel excludesPanel;
    private javax.swing.JButton excludesRemoveButton;
    private javax.swing.JScrollPane excludesScrollPane;
    private javax.swing.JTextField excludesTextField;
    private javax.swing.JCheckBox hiddenFilesCheckBox;
    private javax.swing.JLabel methodTimeoutLabel;
    private javax.swing.JSpinner methodTimeoutSpinner;
    private javax.swing.JCheckBox showThreadsCheckBox;
    private javax.swing.JCheckBox skipSynsCheckBox;
    private javax.swing.JTextField sourceExtField;
    private javax.swing.JLabel sourceExtLabel;
    // End of variables declaration//GEN-END:variables
}
